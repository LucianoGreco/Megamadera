Estructura del Proyecto:

📁 (raíz)
│
│├── .env
│├── 📁 dist
││   ├── 📁 assets
││   │   ├── 1-CdGz2cik.png
││   │   ├── 2-DeYo49qh.png
││   │   ├── breakpoints-Cl0g07MV.js
││   │   ├── contactos-B2lm-Nky.js
││   │   ├── contactos-BDp9lsar.png
││   │   ├── Cookies-BVlQVOjp.js
││   │   ├── facebook-EFQmTYkZ.png
││   │   ├── gmail-Dq6Crg58.png
││   │   ├── herrajes-B7Mycg28.png
││   │   ├── herrajes-Dix8S1-F.png
││   │   ├── herrajes-DPh1uBN4.js
││   │   ├── home-DlxB3xlm.js
││   │   ├── index-D0cUJPDZ.js
││   │   ├── instagram-l32FqvJx.png
││   │   ├── logo-DnSKDPJ0.png
││   │   ├── maps-n2uVEVZu.png
││   │   ├── melaminas-8Kzfq0jD.png
││   │   ├── melaminas-BiHkIS4o.png
││   │   ├── melaminas-DpX7XZa_.js
││   │   ├── muebles-B-XSVY8_.js
││   │   ├── muebles-CqQfUENS.png
││   │   ├── muebles-Z_uykHN5.png
││   │   ├── normalizeTree-LpHbLW8i.js
││   │   ├── Privacidad-Dt4UVP46.js
││   │   ├── ProductoCategoria-PE9ZH5gn.js
││   │   ├── ProductoDestacado-gnmdsiTo.js
││   │   ├── revestimientos-9KdycCh4.png
││   │   ├── revestimientos-B3GydtBU.png
││   │   ├── revestimientos-DluJGZmW.js
││   │   ├── simulador-C67jp7CT.png
││   │   ├── simulador-CsCLOfb3.png
││   │   ├── simulador-DyvYb2pB.js
││   │   ├── Slider-lMCY7ZUP.js
││   │   ├── Terminos-CM4xFbnq.js
││   │   ├── useProductos-B9EDYsbv.js
││   │   ├── vinilos-5R8wqooW.png
││   │   ├── vinilos-bjIsJPU5.js
││   │   ├── vinilos-YNMVe4s2.png
││   │   └── whatsApp-CYFxbOdM.png
││   └── index.html
│├── eslint.config.js
│├── index.html
│├── megamadera_frontend.txt
│├── package.json
│├── 📁 public
│├── README.md
│├── 📁 src
││   ├── 📁 api
││   │   ├── apiClient.js
││   │   ├── index.js
││   │   ├── 📁 resources
││   │   │   └── productsApi.js
││   │   └── 📁 utils
││   │       ├── errorHandler.js
││   │       ├── fixImagePath.js
││   │       ├── flattenTree.js
││   │       ├── normalizeTree.js
││   │       ├── slugify.js
││   │       └── validatePath.js
││   ├── App.jsx
││   ├── 📁 assets
││   │   ├── 📁 backgroundPage
││   │   │   └── home.jpg
││   │   ├── 📁 banner
││   │   │   ├── contactos.png
││   │   │   ├── herrajes.png
││   │   │   ├── melaminas.png
││   │   │   ├── muebles.png
││   │   │   ├── revestimientos.png
││   │   │   ├── simulador.png
││   │   │   └── vinilos.png
││   │   ├── 📁 cardHome
││   │   │   ├── contactos.png
││   │   │   ├── herrajes.png
││   │   │   ├── melaminas.png
││   │   │   ├── muebles.png
││   │   │   ├── revestimientos.png
││   │   │   ├── simulador.png
││   │   │   └── vinilos.png
││   │   ├── 📁 error
││   │   │   └── error.png
││   │   ├── 📁 icons
││   │   │   └── 📁 redes
││   │   │       ├── facebook.png
││   │   │       ├── gmail.png
││   │   │       ├── instagram.png
││   │   │       ├── maps.png
││   │   │       └── whatsApp.png
││   │   ├── 📁 logo
││   │   │   └── logo.png
││   │   └── 📁 products
││   │       └── 📁 simulador
││   │           ├── 1.png
││   │           └── 2.png
││   ├── 📁 components
││   │   ├── 📁 cards
││   │   │   └── CardHome.jsx
││   │   ├── 📁 layout
││   │   │   ├── Footer.jsx
││   │   │   ├── Header.jsx
││   │   │   └── 📁 navbar
││   │   │       └── Navbar.jsx
││   │   ├── 📁 policies
││   │   │   ├── Cookies.jsx
││   │   │   ├── Privacidad.jsx
││   │   │   └── Terminos.jsx
││   │   ├── ProductoDestacado.jsx
││   │   └── 📁 ui
││   │       ├── Banner.jsx
││   │       ├── Buscador.jsx
││   │       ├── Loader.jsx
││   │       ├── Slider.jsx
││   │       └── todosLosProductos.jsx
││   ├── 📁 data
││   │   ├── 📁 components
││   │   │   └── cursor.jsx
││   │   ├── 📁 image
││   │   │   └── gestorImage.js
││   │   └── 📁 pages
││   │       ├── contactos.js
││   │       └── home.js
││   ├── 📁 hooks
││   │   ├── useBuscador.js
││   │   ├── useProductos.js
││   │   └── useTodosLosProductos.js
││   ├── main.jsx
││   ├── 📁 pages
││   │   ├── contactos.jsx
││   │   ├── herrajes.jsx
││   │   ├── home.jsx
││   │   ├── melaminas.jsx
││   │   ├── muebles.jsx
││   │   ├── ProductoCategoria.jsx
││   │   ├── revestimientos.jsx
││   │   ├── simulador.jsx
││   │   └── vinilos.jsx
││   └── 📁 utils
││       └── slugify.js
│├── vercel.json
│└── vite.config.js


Contenido de archivos clave:


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\api\resources\productsApi.js
────────────────────────────────────────────
// src/api/resources/productsApi.js

import { API_BASE, requestJSON } from '../apiClient'; // base URL y función para fetch con JSON
import { flattenTree } from '../utils/flattenTree';   // aplana árbol de productos
import { validatePath } from '../utils/validatePath'; // valida path en árbol

const BASE_URL = `${API_BASE}/products`;

// GET de productos por categoría
export async function getByCategory(category) {
  // Arma la URL codificando la categoría por si tiene caracteres especiales
  const url = `${BASE_URL}/${encodeURIComponent(category)}`;
  // Hace el request y espera el resultado en JSON
  const data = await requestJSON(url);
  // Devuelve los datos
  return data;
}

// Categorías predefinidas (shortcuts para no repetir strings)
export async function getHerrajes() {
  return getByCategory('herrajes');
}

export async function getMelaminas() {
  return getByCategory('melaminas');
}

export async function getRevestimientos() {
  return getByCategory('revestimientos');
}

export async function getMuebles() {
  return getByCategory('muebles');
}

export async function getVinilos() {
  return getByCategory('vinilos');
}

// Busca un nodo dentro del árbol usando un path como ['placares', 'moderno']
export async function getByPath(category, pathArray = []) {
  // Obtiene el árbol completo de la categoría
  const tree = await getByCategory(category);

  // Valida si el path es válido dentro del árbol
  if (!validatePath(tree, pathArray)) {
    throw new Error(`Path inválido: ${pathArray.join('/')}`);
  }

  // Navega el árbol según los segmentos del path
  let node = tree;
  for (const segment of pathArray) {
    // Busca el hijo que tenga el nombre igual al segmento
    node = node.children?.find(child => child.nombre === segment);
    if (!node) throw new Error(`Segmento no encontrado: ${segment}`);
  }

  // Devuelve el nodo encontrado
  return node;
}

// Devuelve todos los nodos del árbol como una lista aplanada
export async function listFlattened(category) {
  // Obtiene el árbol completo
  const tree = await getByCategory(category);
  // Lo aplana en una lista de nodos con path incluido
  return flattenTree(tree);
}

// Busca productos por nombre o código dentro de una categoría
export async function searchProducts(category, query) {
  // Aplana todo el árbol de productos
  const flat = await listFlattened(category);
  // Convierte la búsqueda a minúsculas
  const q = query.toLowerCase();
  // Filtra los productos cuyo nombre o código incluyan el texto
  return flat.filter(
    (item) =>
      item.nombre.toLowerCase().includes(q) ||
      item.codigo?.toLowerCase().includes(q)
  );
}
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\api\utils\errorHandler.js
────────────────────────────────────────────
export function handleApiError(error) {
  console.error('[API ERROR]', error);

  // Podés personalizar la respuesta para el frontend
  return {
    ok: false,
    message: error.message || 'Error inesperado. Intente nuevamente.',
  };
}
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\api\utils\fixImagePath.js
────────────────────────────────────────────
// Define la base pública para las URLs de imágenes (viene del .env o usa localhost por defecto)
const API_PUBLIC_BASE = import.meta.env.VITE_PUBLIC_BASE || "http://localhost:4000";
// const API_PUBLIC_BASE = import.meta.env.VITE_PUBLIC_BASE || "https://backend-megamadera.onrender.com";


// Corrige la ruta de una imagen de producto
export function fixImagePath(img) {
  // Si no hay imagen, usa un placeholder por defecto
  if (!img) return `${API_PUBLIC_BASE}/products/placeholder.jpg`;

  // Si ya es una URL completa (http...), la deja igual
  // Si es una ruta relativa, le agrega el prefijo base
  return img.startsWith("http") ? img : `${API_PUBLIC_BASE}/products/${img}`;
}
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\api\utils\flattenTree.js
────────────────────────────────────────────
// src/utils/flattenTree.js

// Convierte un árbol en una lista lineal con el path completo de cada nodo
export function flattenTree(node, path = []) {
  let result = []; // Lista donde se acumulan los nodos
  const currentPath = [...path, node.nombre]; // Path actual (padres + este nodo)

  // Agrega el nodo actual con su path
  result.push({ ...node, path: currentPath });

  // Si tiene hijos, aplana cada uno y los concatena al resultado
  if (node.children && node.children.length > 0) {
    for (const child of node.children) {
      result = result.concat(flattenTree(child, currentPath));
    }
  }

  return result; // Devuelve la lista final
}
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\api\utils\normalizeTree.js
────────────────────────────────────────────
// Normaliza un nodo del árbol: asegura estructura consistente y recursiva
function normalizeNode(node) {
  return {
    id: node.id,                 // Mantiene el ID
    nombre: node.nombre,         // Mantiene el nombre
    imagenes: node.imagenes,     // Mantiene las imágenes (si las tiene)
    children: Array.isArray(node.children)
      ? node.children.map(normalizeNode) // Normaliza recursivamente los hijos
      : [],                               // Si no hay hijos, deja array vacío
  };
}

// Normaliza un árbol completo (puede ser raíz única o un array de raíces)
export function normalizeTree(tree) {
  if (!tree) return []; // Si no hay árbol, devuelve array vacío

  // Si es un array de nodos, los normaliza todos; si es uno solo, lo normaliza directo
  return Array.isArray(tree) ? tree.map(normalizeNode) : normalizeNode(tree);
}

// Aliases con nombres en español para compatibilidad o legibilidad
export const normalizarArbol = normalizeTree;
export const normalizarDatos = normalizeTree;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\api\utils\slugify.js
────────────────────────────────────────────
// src/api/utils/slugify.js

const slugify = (str) =>
  str
    .toString()
    .toLowerCase()
    .normalize("NFD") // quita tildes
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/\s+/g, "-") // espacios → guiones
    .replace(/[^\w-]+/g, "") // remueve caracteres raros
    .replace(/--+/g, "-") // guiones dobles
    .replace(/^-+|-+$/g, ""); // guiones al principio o fin

export default slugify;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\api\utils\validatePath.js
────────────────────────────────────────────
// src/utils/validatePath.js

// Verifica si un path (array de nombres) existe dentro del árbol
export function validatePath(tree, pathArray) {
  let node = tree; // Empieza desde la raíz del árbol

  for (const segment of pathArray) {
    // Si el nodo actual no tiene hijos, el path es inválido
    if (!node.children) return false;

    // Busca el hijo cuyo nombre coincida con el segmento actual
    node = node.children.find(child => child.nombre === segment);

    // Si no lo encuentra, el path es inválido
    if (!node) return false;
  }

  // Si recorre todos los segmentos sin fallar, el path es válido
  return true;
}
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\api\apiClient.js
────────────────────────────────────────────
// URL base de la API. Se toma del .env, o usa localhost por defecto.
export const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:4000/api';
// export const API_BASE = import.meta.env.VITE_API_BASE || 'https://backend-megamadera.onrender.com/api';



// Construye un query string desde un objeto de parámetros (ej: {q: 'placares'} → "?q=placares")
export function buildQuery(params = {}) {
  const query = new URLSearchParams(params);               // Crea el query
  return query.toString() ? `?${query.toString()}` : '';   // Devuelve "?..." si hay params, si no, cadena vacía
}

// Hace una request HTTP y devuelve la respuesta parseada como JSON
export async function requestJSON(url, opts = {}) {
  const res = await fetch(url, opts);                      // Llama al endpoint con fetch
  if (!res.ok) throw new Error(`Error ${res.status}: ${res.statusText}`); // Si falla, lanza error con status

  const json = await res.json();                           // Parsea la respuesta
  return json.products || json;                            // Si hay una clave "products", la devuelve; si no, todo
}
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\api\index.js
────────────────────────────────────────────
// 📄 src/api/index.js

export * from './resources/productsApi';
// Si agregás más APIs en el futuro:
// export * from './resources/usersApi';
// export * from './resources/ordersApi';
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\cards\CardHome.jsx
────────────────────────────────────────────
import React from "react";


import { Link } from "react-router-dom";

const CardHome = ({ name, image, page, children }) => {
  return (
    <CardWrapper>
      <CardContainer>
        <CardImage src={image} alt={name} />
        <SliderOverlay>{children}</SliderOverlay>
        <CardOverlay />
        <TitleButton to={page}>{name}</TitleButton>
      </CardContainer>
    </CardWrapper>
  );
};

export default CardHome;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\layout\navbar\Navbar.jsx
────────────────────────────────────────────
// Importación de React para poder usar JSX
import React from "react";

// Importa `Link` para crear enlaces de navegación y `useLocation` para conocer la URL actual
import { Link, useLocation } from "react-router-dom";

// Importa styled-components para crear componentes con estilos encapsulados (CSS-in-JS)


// Importa los datos de las secciones desde un archivo de configuración o mock de datos
import data from "@/data/pages/home";


// 📌 Componente estilizado del contenedor del navbar



// 🧠 Componente funcional que representa el Navbar
const Navbar = () => {
  // Hook de React Router que devuelve la ruta actual
  const location = useLocation(); // Ejemplo de retorno: { pathname: "/muebles", ... }

  // Extrae las secciones desde el archivo de datos como array (Object.values de un objeto)
  const secciones = Object.values(data.secciones);

  return (
    // Renderiza el contenedor del navbar con los enlaces
    <NavbarContainer>
      {secciones.map((sec) => (
        <Link
          key={sec.id}                      // 🔑 Clave única por accesibilidad y performance
          to={sec.page}                     // Ruta destino del link (ej: "/melaminas")
          className={location.pathname === sec.page ? "active" : ""} 
          // Se le aplica la clase "active" si la ruta actual coincide con la del link
        >
          {sec.name}                    
        </Link>
      ))}
    </NavbarContainer>
  );
};

// Exporta el componente para poder usarlo en cualquier parte del proyecto
export default Navbar;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\layout\Footer.jsx
────────────────────────────────────────────
const Footer = () => {
  return (
    <Container>                    {/* Fondo oscuro con padding */}
      <Content>                    {/* Contenedor centrado con spacing vertical */}
        <Logo>Mega Madera</Logo>   {/* Título grande de la marca */}

        <Columns>                  {/* Tres columnas con info institucional */}
          <Column>
            <Title>Dirección</Title>
            <Item>Av. Moreno 1455</Item>
            <Item>San Rafael, Mendoza, Argentina</Item>
          </Column>

          <Column>
            <Title>Contacto</Title>
            <Item>Tel: +54 260422505</Item>
            <Item>Email: contacto@megamadera.com</Item>
          </Column>

          <Column>
            <Title>Horario</Title>
            <Item>Lunes a Viernes: 8:00 a 12:30 / 16:00 a 20:30</Item>
            <Item>Sábados: 8:00 a 13:00</Item>
          </Column>
        </Columns>

        <Copy>
          &copy; {new Date().getFullYear()} Mega Madera · Todos los derechos reservados.
        </Copy>
      </Content>
    </Container>
  );
};

export default Footer;

// Pie de página con fondo oscuro y texto claro


// Contenido centrado con separación vertical entre bloques


// Logo destacado con tipografía grande y color amarillo


// Contenedor de las columnas (direccion, contacto, horario)


// Columna individual con ancho máximo


// Título de cada columna


// Ítems dentro de cada columna


// Texto legal del pie de página
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\layout\Header.jsx
────────────────────────────────────────────
import React, { useState, useEffect, useRef } from "react";

import { Link } from "react-router-dom";
import { Menu as MenuIcon, X as CloseIcon } from "lucide-react"; // Íconos de hamburguesa y cierre
import Navbar from "@/components/layout/navbar/Navbar"; // Navbar de escritorio
import data from "@/data/pages/home";                  // Secciones del sitio
import contactos from "@/data/pages/contactos";        // Info de contacto (incluye logo)


// Contenedor principal del header, fijo en el top, animado para mostrar u ocultar


// Contenido interno del header (logo, navbar, menú móvil)


// Logo de la empresa con efecto de escala al interactuar


// Botón hamburguesa visible solo en móvil


// Menú lateral móvil deslizante desde la derecha


// Item de menú en el sidebar móvil


// Botón de cierre del sidebar móvil


// Div invisible en la parte superior para detectar hover y mostrar el header



const Header = () => {
  const [navVisible, setNavVisible] = useState(true);     // Controla visibilidad del header
  const [menuOpen, setMenuOpen] = useState(false);        // Controla apertura del sidebar
  const hideTimeout = useRef(null);                       // Ref para timeout de ocultamiento
  const showTimeout = useRef(null);                       // Ref para timeout tras mostrar

  const secciones = Object.values(data.secciones);        // Extrae las secciones del sitio

  const toggleMenu = () => setMenuOpen((prev) => !prev);  // Abre/cierra el menú móvil

  // Oculta el header tras 3s
  const startHideTimer = () => {
    if (hideTimeout.current) clearTimeout(hideTimeout.current);
    hideTimeout.current = setTimeout(() => {
      setNavVisible(false);
    }, 3000);
  };

  // Muestra el header y lo oculta luego de 3s
  const startHideAfterShow = () => {
    if (showTimeout.current) clearTimeout(showTimeout.current);
    showTimeout.current = setTimeout(() => {
      setNavVisible(false);
    }, 3000);
  };

  // Al montar el componente, inicia el temporizador de ocultamiento
  useEffect(() => {
    startHideTimer();
    return () => {
      if (hideTimeout.current) clearTimeout(hideTimeout.current);
      if (showTimeout.current) clearTimeout(showTimeout.current);
    };
  }, []);

  // Al mover el mouse al borde superior, muestra el header y reprograma el ocultamiento
  const handleMouseEnterTop = () => {
    if (hideTimeout.current) clearTimeout(hideTimeout.current);
    if (showTimeout.current) clearTimeout(showTimeout.current);
    setNavVisible(true);
    startHideAfterShow();
  };

  return (
    <>
      <HoverTrigger onMouseEnter={handleMouseEnterTop} />

      <HeaderWrapper $isVisible={navVisible}>
        <HeaderInner>
          <Link to="/">
            <Logo src={contactos.logo} alt="Logo Mega Madera" />
          </Link>

          <Navbar /> {/* Navbar horizontal (desktop) */}

          <ToggleButton onClick={toggleMenu}>
            <MenuIcon size={28} />
          </ToggleButton>
        </HeaderInner>

        <SideMenu $open={menuOpen}>
          <CloseButton onClick={toggleMenu}>
            <CloseIcon size={28} />
          </CloseButton>

          {secciones.map((sec) => (
            <MenuItem key={sec.id} to={sec.page} onClick={toggleMenu}>
              {sec.name}
            </MenuItem>
          ))}
        </SideMenu>
      </HeaderWrapper>
    </>
  );
};

export default Header;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\policies\Cookies.jsx
────────────────────────────────────────────
import React from 'react';
import { Link } from 'react-router-dom';


// Contenedor principal de la página


// Título de la política de cookies


// Estilos para cada sección de la política de cookies


// Botón de regreso a la página principal


// Enlaces adicionales a otras políticas


// Componente de Política de Cookies
const Cookies = () => {
  return (
    <Container>
      <Title>Política de Cookies</Title>
      
      <Section>
        <h2>1. ¿Qué son las Cookies?</h2>
        <p>
          Las cookies son pequeños archivos de texto que se colocan en su dispositivo cuando visita nuestro sitio web. Se utilizan para mejorar su experiencia en el sitio.
        </p>
        
        <h2>2. Tipos de Cookies que Utilizamos</h2>
        <p>
          Utilizamos cookies para recordar sus preferencias, analizar el tráfico del sitio y mejorar la funcionalidad del sitio web. Esto incluye cookies de sesión y cookies persistentes.
        </p>
        
        <h2>3. Cómo Puede Controlar las Cookies</h2>
        <p>
          Puede controlar y gestionar las cookies a través de la configuración de su navegador. Sin embargo, tenga en cuenta que deshabilitar las cookies puede afectar la funcionalidad del sitio web.
        </p>
        
        <h2>4. Modificaciones</h2>
        <p>
          Podemos actualizar esta política de cookies en cualquier momento. Los cambios se publicarán en esta página.
        </p>
        <p>Última actualización: [Fecha]</p>
      </Section>
      
      <BackButton to="/">Volver a la página principal</BackButton>
      
      <NavLinks>
        <Link to="/terminos">Términos y Condiciones</Link> | 
        <Link to="/privacidad">Política de Privacidad</Link>
      </NavLinks>
    </Container>
  );
};

export default Cookies;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\policies\Privacidad.jsx
────────────────────────────────────────────
import React from 'react';
import { Link } from 'react-router-dom';


// Contenedor principal de la página de privacidad


// Título de la página


// Estilo para las secciones de contenido


// Botón de regreso a la página principal


// Enlaces adicionales a otras políticas


// Componente de Política de Privacidad
const Privacidad = () => (
  <Container>
    <Title>Política de Privacidad</Title>
    
    <Section>
      <h2>1. Información que Recopilamos</h2>
      <p>
        Recopilamos información personal que usted nos proporciona al usar nuestro sitio web, como nombre y correo electrónico.
      </p>

      <h2>2. Cómo Usamos su Información</h2>
      <p>
        Usamos su información para mejorar nuestros servicios y comunicarnos sobre actualizaciones.
      </p>

      <h2>3. Seguridad</h2>
      <p>
        Implementamos medidas de seguridad para proteger su información, aunque no podemos garantizar seguridad absoluta.
      </p>

      <h2>4. Modificaciones</h2>
      <p>
        Podemos actualizar esta política en cualquier momento. Los cambios se publicarán en esta página.
      </p>
      <p>Última actualización: [Fecha]</p>
    </Section>

    <BackButton to="/">Volver a la página principal</BackButton>

    <NavLinks>
      <Link to="/terminos">Términos y Condiciones</Link> | 
      <Link to="/cookies">Política de Cookies</Link>
    </NavLinks>
  </Container>
);

export default Privacidad;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\policies\Terminos.jsx
────────────────────────────────────────────
import React from 'react';
import { Link } from 'react-router-dom';


// Contenedor principal de la página de términos


// Título de la página


// Estilo para cada sección del contenido


// Botón de regreso a la página principal


// Enlaces a otras políticas


// Componente de Términos y Condiciones
const Terminos = () => (
  <Container>
    <Title>Términos y Condiciones</Title>
    
    <Section>
      <h2>1. Aceptación de los Términos</h2>
      <p>
        Al utilizar nuestro sitio, acepta estos términos y condiciones en su totalidad.
      </p>

      <h2>2. Uso del Sitio Web</h2>
      <p>
        Debe usar el sitio de acuerdo con la ley y estos términos. No debe dañar el sitio web.
      </p>

      <h2>3. Propiedad Intelectual</h2>
      <p>
        Todo el contenido del sitio web es propiedad de [Su Empresa] y está protegido por leyes de propiedad intelectual.
      </p>

      <h2>4. Limitación de Responsabilidad</h2>
      <p>
        No somos responsables de ningún daño resultante del uso del sitio web.
      </p>

      <h2>5. Modificaciones</h2>
      <p>
        Nos reservamos el derecho de modificar estos términos en cualquier momento.
      </p>
      <p>Última actualización: [Fecha]</p>
    </Section>

    <BackButton to="/">Volver a la página principal</BackButton>

    <NavLinks>
      <Link to="/privacidad">Política de Privacidad</Link> | 
      <Link to="/cookies">Política de Cookies</Link>
    </NavLinks>
  </Container>
);

export default Terminos;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\ui\Banner.jsx
────────────────────────────────────────────
// Componente que muestra un banner rotativo con imágenes, texto y botón de acción
import React, { useState, useEffect, useMemo } from "react";
import styled, { css } from "styled-components";
import { Link } from "react-router-dom";
import data from "@/data/pages/home"; // Datos de secciones para el banner
 // Breakpoints para responsive
import Buscador from "@/components/ui/Buscador";

const Banner = () => {
  // Estado para saber qué sección está activa
  const [currentIndex, setCurrentIndex] = useState(0);

  // Memoiza las secciones una vez (para que no se recalculen en cada render)
  const sections = useMemo(() => Object.values(data.secciones), []);

  // Efecto que cambia el slide automáticamente cada 6 segundos
  useEffect(() => {
    const intervalId = setInterval(() => {
      // Cambia al siguiente índice. Vuelve a 0 al final.
      setCurrentIndex((prevIndex) => (prevIndex + 1) % sections.length);
    }, 6000);

    // Limpia el intervalo cuando se desmonta el componente
    return () => clearInterval(intervalId);
  }, [sections.length]);

  // Sección actual que se está mostrando
  const currentSection = sections[currentIndex];

  return (
    <BannerContainer>
      <ImageWrapper>
        {/* Renderiza todas las imágenes del slider, pero solo una es visible */}
        {sections.map((section, idx) => (
          <BannerImage
            key={idx}
            src={section.background} // Imagen de fondo
            alt={section.name}
            $active={idx === currentIndex} // Solo se muestra la activa
            loading="lazy" // Lazy load para performance
          />
        ))}
        {/* Capa de degradado oscuro encima de la imagen */}
        <Overlay />
        <BuscadorWrapper>
          <Buscador />
        </BuscadorWrapper>
      </ImageWrapper>

      {/* Contenido textual y botón */}
      <Content>
        {/* Nombre de la sección */}
        <Title>{currentSection.name}</Title>

        {/* Descripción (usa una por defecto si está vacía) */}
        <Description>
          {currentSection.description?.trim()
            ? currentSection.description
            : `Descubre lo mejor de nuestra colección en ${currentSection.name}. Explora ahora y transforma tus espacios.`}
        </Description>

        {/* Botón que lleva a la página de la sección */}
        <StyledButton
          to={currentSection.page}
          aria-label={`Ir a ${currentSection.name}`}
        >
          Explorar {currentSection.name}
        </StyledButton>
      </Content>
    </BannerContainer>
  );
};

export default Banner;

// Nuevo contenedor del buscador en Banner.jsx


// Contenedor general del banner (divide imagen y contenido en desktop)


// Contenedor que agrupa todas las imágenes


// Cada imagen del banner. Se superponen todas, pero solo una tiene opacity 1


// Capa de sombreado para mejorar la legibilidad del texto


// Zona donde se muestra el título, descripción y botón


// Título principal del banner


// Texto descriptivo opcional


// Botón de acción con estilo sólido
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\ui\Loader.jsx
────────────────────────────────────────────
// Loader.jsx
// Componente visual de carga con animación de giro simple y estilizada

import styled, { keyframes } from 'styled-components'; // Importa estilos y soporte para animaciones

// Animación de giro: rota 360 grados continuamente
const spin = keyframes`
  to { transform: rotate(360deg); } // De 0° a 360°
`;

// Estilo del spinner: círculo con borde superior más oscuro que gira


// Componente funcional que devuelve el spinner
const Loader = () => <Spinner />;

export default Loader;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\ui\Slider.jsx
────────────────────────────────────────────
import React, { useRef, useState, useEffect } from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { useNavigate } from "react-router-dom";

const Slider = ({ title, data, categoria }) => {
  const containerRef = useRef(null);
  const [canScrollLeft, setCanScrollLeft] = useState(false);
  const [canScrollRight, setCanScrollRight] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const navigate = useNavigate();

  const BASE_URL = import.meta.env.VITE_PUBLIC_BASE || "http://localhost:4000";

  // Actualiza botones de scroll
  useEffect(() => {
    const checkScroll = () => {
      if (!containerRef.current) return;
      const { scrollLeft, scrollWidth, clientWidth } = containerRef.current;
      setCanScrollLeft(scrollLeft > 0);
      setCanScrollRight(scrollLeft + clientWidth < scrollWidth - 1);
    };

    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
      checkScroll();
    };

    checkScroll();
    containerRef.current?.addEventListener("scroll", checkScroll);
    window.addEventListener("resize", handleResize);

    return () => {
      containerRef.current?.removeEventListener("scroll", checkScroll);
      window.removeEventListener("resize", handleResize);
    };
  }, [data]);

  const scrollBy = (offset) => {
    containerRef.current?.scrollBy({ left: offset, behavior: "smooth" });
  };

const handleClick = (item) => {
  const nombre = encodeURIComponent(item.nombre.toLowerCase());
  navigate(`/${categoria}/${nombre}`, { state: { producto: item } });
};


  return (
    <div style={styles.container}>
      <div style={styles.sliderWrapper}>
        {!isMobile && (
          <button
            onClick={() => scrollBy(-300)}
            style={{ ...styles.navButton, left: 0 }}
            disabled={!canScrollLeft}
          >
            <ChevronLeft size={16} />
          </button>
        )}

        <div ref={containerRef} style={styles.slider}>
          {data.map((item) => {
            const imageSrc = item.imagen?.startsWith("http")
              ? item.imagen
              : `${BASE_URL}/products/${item.imagen ?? "placeholder.jpg"}`;

            return (
              <div
                key={item.id}
                onClick={() => handleClick(item)}
                style={{ textDecoration: "none", color: "inherit" }}
              >
                <div style={styles.card} className="slider-card">
                  <img src={imageSrc} alt={item.nombre} style={styles.image} />
                  <p style={styles.name}>{item.nombre}</p>
                </div>
              </div>
            );
          })}
        </div>

        {!isMobile && (
          <button
            onClick={() => scrollBy(300)}
            style={{ ...styles.navButton, right: 0 }}
            disabled={!canScrollRight}
          >
            <ChevronRight size={16} />
          </button>
        )}
      </div>

      
    </div>
  );
};



export default Slider;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\ui\Buscador
────────────────────────────────────────────
[archivo no encontrado]
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\ui\todosLosProductos.jsx
────────────────────────────────────────────
// Componente que muestra una grilla con todos los productos traídos desde un hook personalizado
import React from "react";

import useTodosLosProductos from "@/hooks/useTodosLosProductos"; // Hook que trae todos los productos


const TodosLosProductos = () => {
  // Extrae datos, estado de carga y errores del hook
  const { productos, loading, error } = useTodosLosProductos();

  // Muestra mensaje de carga mientras se obtienen los datos
  if (loading) return <div>Cargando todos los productos…</div>;

  // Muestra mensaje de error si la petición falla
  if (error) return <div>{error}</div>;

  // Muestra la grilla de productos una vez cargados
  return (
    <Grid>
      {productos.map((p) => (
        <Card key={`${p.id}-${p.categoria}`}> {/* Clave única combinando ID y categoría */}
          <img src={p.imagenes?.[0] || ""} alt={p.nombre} /> {/* Primera imagen o vacío */}
          <div>
            <strong>{p.nombre}</strong>       {/* Nombre del producto */}
            <p>{p.categoria}</p>              {/* Categoría como subtítulo */}
          </div>
        </Card>
      ))}
    </Grid>
  );
};

export default TodosLosProductos;


// Contenedor de la grilla responsive


// Tarjeta individual de producto
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\ProductoDestacado.jsx
────────────────────────────────────────────
import React, { useState } from "react";


import { useLocation } from "react-router-dom";

const ProductoDestacado = ({ producto: propProducto }) => {
  const location = useLocation();
  const producto = propProducto || location.state?.producto || {};
  const [imagenActiva, setImagenActiva] = useState(0);

  console.log("🔥 Producto recibido en ProductoDestacado:");
  console.log(producto);

  const imagenes = Array.isArray(producto.imagenes) ? producto.imagenes : [];

const buildImageUrl = (imgPath) => {
  const base = import.meta.env.VITE_PUBLIC_BASE || "http://localhost:4000";

  // Si el path ya es una ruta relativa completa tipo "revestimientos/pared/.../1.png"
  if (!imgPath.includes("/")) {
    // Solo el nombre del archivo → usamos la ruta
    return `${base}/products/${producto.ruta}/${imgPath}`;
  }

  // Ruta ya armada desde API → no duplicamos
  return `${base}/products/${imgPath}`;
};


  const imagenPrincipal = imagenes[imagenActiva]
    ? buildImageUrl(imagenes[imagenActiva])
    : null;

  return (
    <Destacado>
      <Titulo>Producto destacado</Titulo>
      <Card>
        {imagenPrincipal && (
          <Imagen src={imagenPrincipal} alt={producto.nombre} />
        )}
        <Info>
          <Nombre>{producto.nombre}</Nombre>
          <Descripcion>{producto.descripcion || "Sin descripción"}</Descripcion>
        </Info>
        {imagenes.length > 1 && (
          <Miniaturas>
            {imagenes.map((img, idx) => (
              <Miniatura
                key={idx}
                src={buildImageUrl(img)}
                alt={`Vista ${idx + 1}`}
                onClick={() => setImagenActiva(idx)}
                $activa={idx === imagenActiva}
              />
            ))}
          </Miniaturas>
        )}
      </Card>
    </Destacado>
  );
};

export default ProductoDestacado;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\data\components\cursor.jsx
────────────────────────────────────────────
// Cursor.jsx

// Importa los hooks necesarios y utilidades de styled-components
import { useEffect, useState, useRef } from "react";
import styled, { keyframes, createGlobalStyle, css } from "styled-components";

// Datos de contacto donde está el logo que se usará como cursor
import contactos from "@/data/pages/contactos";


// 🎞️ Definición de la animación de giro para el cursor personalizado
const spin = keyframes`
  from { transform: rotate(0deg); }     // Inicio sin rotación
  to { transform: rotate(360deg); }     // Gira 360°
`;


// 🎨 Estilo del cursor personalizado



// 🧼 Estilo global que oculta el cursor del sistema en toda la app
const GlobalStyle = createGlobalStyle`
  body, a, button, * {
    cursor: none !important;   // Fuerza a ocultar el cursor estándar
  }
`;


// 🔁 Componente funcional del cursor personalizado
const Cursor = () => {
  // Guarda la posición actual del mouse (x, y)
  const [position, setPosition] = useState({ x: 0, y: 0 });

  // Estado para controlar si se debe girar el cursor
  const [rotating, setRotating] = useState(false);

  // Estado para determinar si el cursor está sobre un botón o link
  const [hovered, setHovered] = useState(false);

  // Referencia al timeout que detiene la animación de giro si no hay movimiento
  const stopTimeout = useRef(null);


  // 📌 useEffect para manejar eventos del mouse en el DOM
  useEffect(() => {
    // Cuando se mueve el mouse, actualiza coordenadas y activa la rotación
    const handleMouseMove = (e) => {
      setPosition({ x: e.clientX, y: e.clientY });
      setRotating(true);

      // Limpia cualquier timeout anterior
      if (stopTimeout.current) clearTimeout(stopTimeout.current);

      // Programa detener la rotación si no se mueve por 100ms
      stopTimeout.current = setTimeout(() => {
        setRotating(false);
      }, 100);
    };

    // Si el mouse entra en un link o botón, activa el "hover"
    const handleMouseOver = (e) => {
      if (e.target.closest("a, button")) {
        setHovered(true);
      }
    };

    // Si el mouse sale del link o botón, desactiva el "hover"
    const handleMouseOut = (e) => {
      if (e.target.closest("a, button")) {
        setHovered(false);
      }
    };

    // Asigna los listeners globales
    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("mouseover", handleMouseOver);
    document.addEventListener("mouseout", handleMouseOut);

    // 🔄 Limpia los listeners y timeouts al desmontar
    return () => {
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("mouseover", handleMouseOver);
      document.removeEventListener("mouseout", handleMouseOut);
      clearTimeout(stopTimeout.current);
    };
  }, []); // Solo se ejecuta una vez al montar


  // Renderiza el cursor en pantalla
  return (
    <>
      {/* Aplica el estilo global que oculta el cursor nativo */}
      <GlobalStyle />

      {/* Cursor visual */}
      <CustomCursor
        style={{ left: `${position.x}px`, top: `${position.y}px` }} // Posición dinámica
        rotating={rotating}  // Controla si se está girando
        hovered={hovered}    // Controla si está sobre un link/botón
      >
        {/* Logo como cursor */}
        <img src={contactos.logo} alt="Logo" />
      </CustomCursor>
    </>
  );
};

export default Cursor;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\data\image\gestorImage.js
────────────────────────────────────────────
// ✅ gestorImage.js — Carga y organiza imágenes automáticamente por carpetas y nombres

// 🔁 Carga todos los archivos de la carpeta logo de forma inmediata (eager)
const logos = import.meta.glob('@/assets/logo/*', { eager: true });

// 🔁 Carga todas las imágenes de fondo
const banners = import.meta.glob('@/assets/banner/*', { eager: true });

// 🔁 Carga íconos desde subcarpetas dentro de /icons/
const icons = import.meta.glob('@/assets/icons/*/*.{jpg,jpeg,png}', { eager: true });

// 🔁 Carga imágenes del simulador desde la carpeta /products/simulador/
const simuladorArchivos = import.meta.glob('@/assets/products/simulador/*.{jpg,jpeg,png}', { eager: true });

// 🔁 Carga las imágenes que se usan en las tarjetas del home
const cards = import.meta.glob('@/assets/cardHome/*', { eager: true });


// 🔧 Procesar imágenes del simulador para tener claves amigables como "simulador-1"
const procesadasSimulador = {};

for (const path in simuladorArchivos) {
  // Extrae solo el nombre del archivo sin extensión (ej: "1" de "1.png")
  const fileName = path.split('/').pop().split('.')[0];

  let key = fileName;

  // Si el nombre es numérico puro, lo transforma en "simulador-X"
  if (/^\d+$/.test(fileName)) {
    key = `simulador-${fileName}`;
  }
  // Si no tiene el prefijo "simulador-", lo agrega con guion (ej: "puerta1" → "puerta-1")
  else if (!fileName.includes('simulador-')) {
    key = fileName.replace(/([a-zA-Z]+)(\d+)/, '$1-$2');
  }

  // Asocia la imagen procesada al nombre de clave final
  procesadasSimulador[key] = simuladorArchivos[path].default;
}


// 🃏 Procesar imágenes de las tarjetas del home
const procesadasCards = {};

for (const path in cards) {
  // Usa el nombre del archivo como clave (sin extensión)
  const key = path.split('/').pop().split('.')[0];
  procesadasCards[key] = cards[path].default;
}


// 🌄 Procesar imágenes de fondo para usarlas por nombre
const procesadasBanners = {};

for (const path in banners) {
  const key = path.split('/').pop().split('.')[0];
  procesadasBanners[key] = banners[path].default;
}


// 🚀 Exportar todo lo que se cargó y procesó, con nombres claros

export const imagenLogo = logos;                        // Todos los logos
export const bannerPageImage = procesadasBanners;    // Fondos por clave
export const CardHomeImage = procesadasCards;           // Imágenes para las cards
export const iconosRedes = icons;                       // Íconos de redes o generales
export const imagenesSimulador = procesadasSimulador;   // Imágenes del simulador con claves limpias
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\data\pages\contactos.js
────────────────────────────────────────────
// 📄 src/data/pages/contactos.js

// 🖼️ Importa el logo principal de la empresa
import imagenLogo from "@/assets/logo/logo.png";

// 📦 Objeto con toda la info de contacto, usado en distintas partes del sitio
const contactos = {
  // 📛 Nombre comercial
  nombreEmpresa: "Mega Madera",

  // 📍 Dirección física
  direccion: {
    calle: "Av. Moreno 1455",
    localidad: "San Rafael",
    provincia: "Mendoza",
    pais: "Argentina",
  },

  // ☎️ Teléfono principal
  telefono: "+54 260422505",

  // 📧 Email de contacto general
  correo: "contacto@megamadera.com",

  // ⏰ Horarios de atención divididos por turno
  horarios: {
    mañana: {
      apertura: "08:00",
      cierre: "13:00",
    },
    tarde: {
      apertura: "16:00",
      cierre: "20:00",
    },
  },

  // 📅 Días hábiles
  dias: ["lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],

  // 🖼️ Logo a mostrar (objeto importado arriba)
  logo: imagenLogo,

  // 🌐 Redes sociales y otros enlaces de contacto
  redesSociales: {
    facebook: "https://facebook.com/megamadera",
    instagram: "https://instagram.com/mega.madera",
    whatsapp: "https://wa.me/+549260433172",
    correoVentas: "ventas.megamadera@gmail.com",
    GoogleMaps: "https://maps.app.goo.gl/ZKd8QbWgY8aJM6gF9"
  },
};

// 📤 Exportación para que se pueda importar en cualquier componente
export default contactos;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\data\pages\home.js
────────────────────────────────────────────
// 📄 src/data/pages/home.js

// 🖼️ Importamos las imágenes procesadas para las secciones desde el gestor
import { CardHomeImage, bannerPageImage } from "@/data/image/gestorImage.js";

// 🔧 Función utilitaria para construir un objeto de sección con una estructura uniforme
const buildSection = ({ id, name, image, page, description = "" }) => {
  const key = name.toLowerCase(); // Usamos el nombre en minúsculas para acceder al fondo correspondiente
  return {
    id,                  // Identificador numérico único
    name,                // Nombre visible de la sección (ej: "Melaminas")
    description,         // Descripción de la sección (puede estar vacía por defecto)
    image,               // Imagen de portada (card principal)
    page,                // Ruta a la que redirige (ej: "/melaminas")
    background: bannerPageImage[key] || null, // Fondo asociado, si existe
  };
};

// 📦 Objeto principal con todas las secciones del home
const data = {
  secciones: {
    // 🔩 Herrajes
    herrajes: buildSection({
      id: 1,
      name: "Herrajes",
      image: CardHomeImage.herrajes,
      page: "/herrajes",
      description:
        "La mejor selección de herrajes para muebles y construcción, con diseños modernos y alta calidad para todos tus proyectos."
    }),

    // 🟫 Melaminas
    melaminas: buildSection({
      id: 2,
      name: "Melaminas",
      image: CardHomeImage.melaminas,
      page: "/melaminas",
      description:
        "Amplia variedad de melaminas en distintos colores y texturas para dar estilo y durabilidad a tus muebles."
    }),

    // 🪑 Muebles
    muebles: buildSection({
      id: 3,
      name: "Muebles",
      image: CardHomeImage.muebles,
      page: "/muebles",
      description:
        "Diseños exclusivos de muebles funcionales y estéticos para cada ambiente de tu hogar u oficina."
    }),

    // 🧱 Revestimientos
    revestimiento: buildSection({
      id: 4,
      name: "Revestimientos",
      image: CardHomeImage.revestimientos,
      page: "/revestimientos",
      description:
        "Revestimientos de pared y pisos que combinan belleza y resistencia para transformar tus espacios."
    }),

    // 🖥️ Simulador
    simulador: buildSection({
      id: 6,
      name: "Simulador",
      image: CardHomeImage.simulador,
      page: "/simulador",
      description:
        "Visualiza cómo quedarán tus ambientes antes de comenzar tu proyecto con nuestro simulador interactivo."
    }),

    // 🧲 Vinilos
    vinilos: buildSection({
      id: 8,
      name: "Vinilos",
      image: CardHomeImage.vinilos,
      page: "/vinilos",
      description:
        "Vinilos decorativos y funcionales para vidrios, que aportan privacidad y un toque elegante a tus ambientes."
    }),

    // ☎️ Contacto
    contacto: buildSection({
      id: 9,
      name: "Contactos",
      image: CardHomeImage.contactos,
      page: "/contactos",
      description:
        "Contáctanos para asesoramiento personalizado y resolver todas tus consultas sobre nuestros productos y servicios."
    }),
  },
};

// 📤 Exportamos el objeto `data` con todas las secciones para su uso en otras partes del sitio (ej: Home, Navbar, Banner)
export default data;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\hooks\useBuscador.js
────────────────────────────────────────────
// 📁 src/hooks/useBuscador.js

import { useMemo } from "react";
import useTodosLosProductos from "./useTodosLosProductos";

// 🧠 Hook para buscar productos con query + sugerencias
export default function useBuscador(query) {
  const { productos, loading } = useTodosLosProductos();
  const q = query.trim().toLowerCase();

  // 🔍 Resultado principal
  const resultados = useMemo(() => {
    if (!q || productos.length === 0) return [];

    return productos.filter((p) => {
      return (
        p.nombre?.toLowerCase().includes(q) ||
        p.descripcion?.toLowerCase().includes(q) ||
        p.categoria?.toLowerCase().includes(q) ||
        p.path?.join("/").toLowerCase().includes(q) ||
        (Array.isArray(p.tags) && p.tags.some((tag) => tag.includes(q)))
      );
    });
  }, [q, productos]);

  // 💡 Sugerencias automáticas (autocomplete)
  const sugerencias = useMemo(() => {
    if (!q || productos.length === 0) return [];

    const pool = new Set();

    productos.forEach((p) => {
      if (p.tags) {
        p.tags.forEach((tag) => {
          if (tag.includes(q)) pool.add(tag);
        });
      }
    });

    return [...pool].slice(0, 6);
  }, [q, productos]);

  return { resultados, sugerencias, loading };
}
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\hooks\useProductos.js
────────────────────────────────────────────
// 📄 src/hooks/useProductos.js

// React: hooks de estado y efecto
import { useEffect, useState } from "react";

// 🧹 Utilidad para normalizar árboles de productos (estructura común en la API)
import { normalizarDatos } from "@/api/utils/normalizeTree";

// 🧠 Hook reutilizable para consumir funciones que traen productos desde la API
export default function useProductos(fn) {
  // Estado para guardar los datos procesados
  const [data, setData] = useState([]);

  // Estado para manejar la carga
  const [loading, setLoading] = useState(true);

  // Estado para manejar errores
  const [error, setError] = useState(false);

  // 🌀 useEffect: se ejecuta una vez cuando cambia `fn`
  useEffect(() => {
    let ignore = false; // Flag para ignorar el resultado si el componente se desmonta

    setLoading(true); // Comienza la carga

    // Ejecuta la función recibida (que debe devolver una promesa con datos crudos)
    fn()
      .then((res) => {
        if (!ignore) {
          // Normaliza los datos recibidos (para mantener estructura consistente)
          const normalizado = normalizarDatos(res);

          // Actualiza estado
          setData(normalizado);
          setLoading(false);
        }
      })
      .catch((err) => {
        console.error("Error en useProductos:", err);
        if (!ignore) {
          setError(true);
          setLoading(false);
        }
      });

    // Cleanup: si el componente se desmonta antes de que llegue la respuesta, se ignora el resultado
    return () => {
      ignore = true;
    };
  }, [fn]); // ⚠️ Se vuelve a ejecutar si cambia la función `fn`

  // Retorna el estado actual del hook para usar en cualquier componente
  return { data, loading, error };
}
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\hooks\useTodosLosProductos.js
────────────────────────────────────────────
// 📁 src/hooks/useTodosLosProductos.js

import { useEffect, useState } from "react";
import {
  getHerrajes,
  getMelaminas,
  getRevestimientos,
  getMuebles,
  getVinilos,
} from "@/api/resources/productsApi";

import { normalizarArbol } from "@/api/utils/normalizeTree";

// 🔁 Aplana recursivamente un árbol a una lista plana de productos
const flattenTree = (arbol) => {
  const resultado = [];
  const recorrer = (nodo) => {
    resultado.push(nodo);
    if (Array.isArray(nodo.children)) {
      nodo.children.forEach(recorrer);
    }
  };
  Array.isArray(arbol) ? arbol.forEach(recorrer) : recorrer(arbol);
  return resultado;
};

// 🧠 Genera tags a partir de nombre, descripción, categoría y path
const generarTags = (producto) => {
  const base = [
    producto.nombre,
    producto.descripcion,
    producto.categoria,
    ...(producto.path || []),
  ]
    .join(" ")
    .toLowerCase();

  return base
    .split(/[\s,/.-]+/)
    .filter(Boolean)
    .filter((v, i, a) => a.indexOf(v) === i); // sin duplicados
};

// 🧠 Hook personalizado que centraliza y normaliza todos los productos del sistema
const useTodosLosProductos = () => {
  const [productos, setProductos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const cargar = async () => {
      setLoading(true);
      try {
        const [mel, her, rev, mub, vin] = await Promise.all([
          getMelaminas(),
          getHerrajes(),
          getRevestimientos(),
          getMuebles(),
          getVinilos(),
        ]);

        const todos = [
          ...flattenTree(normalizarArbol(mel)).map((p) => ({
            ...p,
            categoria: "melaminas",
            tags: generarTags(p),
          })),
          ...flattenTree(normalizarArbol(her)).map((p) => ({
            ...p,
            categoria: "herrajes",
            tags: generarTags(p),
          })),
          ...flattenTree(normalizarArbol(rev)).map((p) => ({
            ...p,
            categoria: "revestimientos",
            tags: generarTags(p),
          })),
          ...flattenTree(normalizarArbol(mub)).map((p) => ({
            ...p,
            categoria: "muebles",
            tags: generarTags(p),
          })),
          ...flattenTree(normalizarArbol(vin)).map((p) => ({
            ...p,
            categoria: "vinilos",
            tags: generarTags(p),
          })),
        ];

        setProductos(todos);
        setError(null);
      } catch (err) {
        console.error(err);
        setError("Error al cargar los productos");
      } finally {
        setLoading(false);
      }
    };

    cargar();
  }, []);

  return { productos, loading, error };
};

export default useTodosLosProductos;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\contactos.jsx
────────────────────────────────────────────
// 📄 src/pages/Contactos.jsx

 // Estilos con styled-components
import contactos from "@/data/pages/contactos"; // Datos de contacto
 // Breakpoints reutilizables

// Iconos de redes sociales
import {
  FaFacebook,
  FaInstagram,
  FaWhatsapp,
  FaEnvelope,
  FaMapMarkerAlt,
} from "react-icons/fa";

// ----------------- 🎨 Styled Components -----------------

// Contenedor principal de la sección de contacto


// Logo centrado


// Título con el nombre de la empresa


// Dirección


// Teléfono y correo


// Contenedor genérico para secciones internas


// Subtítulo (horarios de atención, etc.)


// Texto estándar


// Íconos de redes sociales


// Botón flotante de WhatsApp


// Iframe de Google Maps


// ----------------- 💡 Componente Principal -----------------

const Contactos = () => {
  // Destructuring de los datos desde el archivo de contacto
  const {
    nombreEmpresa,
    direccion,
    telefono,
    correo,
    horarios,
    dias,
    logo,
    redesSociales,
  } = contactos;

  return (
    <>
      <Container>
        {/* Logo */}
        {logo && (
          <LogoWrapper>
            <img src={logo} alt={`Logo de ${nombreEmpresa}`} />
          </LogoWrapper>
        )}

        {/* Nombre de empresa */}
        <Heading>{nombreEmpresa}</Heading>

        {/* Dirección completa */}
        <Address>
          {direccion.calle}, {direccion.localidad}, {direccion.provincia}, {direccion.pais}
        </Address>

        {/* Teléfono y correo */}
        <InfoRow>
          <p>📞 <strong>{telefono}</strong></p>
          <p>✉️ <strong>{correo}</strong></p>
        </InfoRow>

        {/* Horarios de atención */}
        <Section>
          <SubHeading>Horarios de Atención</SubHeading>
          <Text>
            {dias.join(", ")} de {horarios.mañana.apertura} a {horarios.mañana.cierre} y de{" "}
            {horarios.tarde.apertura} a {horarios.tarde.cierre} hs
          </Text>
        </Section>

        {/* Íconos de redes sociales */}
        <SocialLinks>
          {redesSociales.facebook && (
            <a href={redesSociales.facebook} target="_blank" rel="noopener noreferrer">
              <FaFacebook size={24} color="#1877F2" />
            </a>
          )}
          {redesSociales.instagram && (
            <a href={redesSociales.instagram} target="_blank" rel="noopener noreferrer">
              <FaInstagram size={24} color="#E4405F" />
            </a>
          )}
          {redesSociales.whatsapp && (
            <a href={redesSociales.whatsapp} target="_blank" rel="noopener noreferrer">
              <FaWhatsapp size={24} color="#25D366" />
            </a>
          )}
          {redesSociales.correoVentas && (
            <a href={`mailto:${redesSociales.correoVentas}`}>
              <FaEnvelope size={24} color="#EA4335" />
            </a>
          )}
          {redesSociales.GoogleMaps && (
            <a href={redesSociales.GoogleMaps} target="_blank" rel="noopener noreferrer">
              <FaMapMarkerAlt size={24} color="#EA4335" />
            </a>
          )}
        </SocialLinks>

        {/* Mapa embebido si existe el enlace */}
        {redesSociales.GoogleMaps && (
          <MapaIframe
            src="https://maps.google.com/maps?q=Av.%20Moreno%201455%2C%20San%20Rafael%2C%20Mendoza%2C%20Argentina&t=&z=15&ie=UTF8&iwloc=&output=embed"
            allowFullScreen
            loading="lazy"
            referrerPolicy="no-referrer-when-downgrade"
          />
        )}
      </Container>

      {/* Botón flotante de WhatsApp */}
      {redesSociales.whatsapp && (
        <WhatsAppButton
          href={redesSociales.whatsapp}
          target="_blank"
          rel="noopener noreferrer"
        >
          <FaWhatsapp size={20} />
          WhatsApp
        </WhatsAppButton>
      )}
    </>
  );
};

export default Contactos;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\herrajes.jsx
────────────────────────────────────────────
import React, { useState, useEffect } from "react";

import { getHerrajes } from "@/api";
import useProductos from "@/hooks/useProductos";
import Slider from "@/components/ui/Slider";
import { normalizarDatos } from "@/api/utils/normalizeTree";

const API_PUBLIC_BASE = "http://localhost:4000";

const Herrajes = () => {
  const { data: rawItems, loading, error } = useProductos(getHerrajes);
  const [path, setPath] = useState([]);
  const [selectedLeaf, setSelectedLeaf] = useState(null);
  const [destacados, setDestacados] = useState([]);

  useEffect(() => {
    if (rawItems && rawItems.length > 0) {
      const normalizados = normalizarDatos(rawItems);
      const planos = flatten(normalizados);
      setDestacados(planos);
    }
  }, [rawItems]);

  if (loading) return <Container>Cargando herrajes…</Container>;
  if (error) return <Container>❌ Error al cargar los herrajes</Container>;

  const items = normalizarHerrajes(rawItems);

  const currentItems = path.reduce(
    (acc, current) => acc.find((x) => x.id === current)?.children || [],
    items
  );

  const handleClick = (item) => {
    if (item.children && item.children.length > 0) {
      setPath([...path, item.id]);
    } else {
      setSelectedLeaf(item);
    }
  };

  const handleBack = () => {
    if (selectedLeaf) {
      setSelectedLeaf(null);
    } else {
      setPath(path.slice(0, -1));
    }
  };

  return (
    <Container>
      <Titulo>Herrajes</Titulo>

      {/* ✅ Slider igual que en Home */}
      <Slider title="Herrajes destacados" data={destacados} categoria="herrajes" />

      {(path.length > 0 || selectedLeaf) && (
        <BackButton onClick={handleBack}>⬅ Volver</BackButton>
      )}

      <Grid>
        {currentItems.map((item) => (
          <Card key={item.id} onClick={() => handleClick(item)}>
            <CardImage src={item.imagen} alt={item.nombre} />
            <CardContent>
              <Title>{item.nombre}</Title>
            </CardContent>
          </Card>
        ))}
      </Grid>

      {selectedLeaf && (
        <ModalOverlay onClick={() => setSelectedLeaf(null)}>
          <ModalContent onClick={(e) => e.stopPropagation()}>
            <CloseButton onClick={() => setSelectedLeaf(null)}>×</CloseButton>
            <ModalImage src={selectedLeaf.imagen} alt={selectedLeaf.nombre} />
            <ModalInfo>
              <ModalTitle>{selectedLeaf.nombre}</ModalTitle>
              <ModalDesc>{selectedLeaf.descripcion}</ModalDesc>
            </ModalInfo>
          </ModalContent>
        </ModalOverlay>
      )}
    </Container>
  );
};

export default Herrajes;

// 🔁 Aplanador igual que en Home.jsx
const flatten = (nodos, currentPath = []) => {
  const hojas = [];

  const rec = (nodo, path) => {
    const nuevaRuta = [...path, nodo.nombre];
    if (!nodo.children || nodo.children.length === 0) {
      const imagen = nodo.imagenes?.[0] ?? "placeholder.jpg";
      const productoPlano = {
        ...nodo,
        imagen,
        ruta: nuevaRuta.join("/"),
      };
      hojas.push(productoPlano);
    } else {
      nodo.children.forEach((child) => rec(child, nuevaRuta));
    }
  };

  nodos.forEach((n) => rec(n, currentPath));
  return hojas;
};

// 🧼 Normalizador estructural para árbol
const normalizarHerrajes = (productos) => {
  return productos.map((item) => ({
    ...item,
    imagen: `${API_PUBLIC_BASE}/products/${item.imagenes?.[0] ?? "placeholder.jpg"}`,
    children: normalizarHerrajes(item.children || []),
  }));
};

// 🎨 Estilos
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\home.jsx
────────────────────────────────────────────
import React, { useEffect, useState } from "react";


import {
  getHerrajes,
  getMelaminas,
  getRevestimientos,
  getMuebles,
  getVinilos,
} from "@/api/resources/productsApi";

import Banner from "@/components/ui/Banner";
import CardHome from "@/components/cards/CardHome";
import Slider from "@/components/ui/Slider";
import ProductoDestacado from "@/components/ProductoDestacado";

import data from "@/data/pages/home";
import { normalizarDatos } from "@/api/utils/normalizeTree";
import { useLocation } from "react-router-dom";

const Home = () => {
  const [todos, setTodos] = useState([]);
  const [todosHerrajes, setTodosHerrajes] = useState([]);
  const [todosMelaminas, setTodosMelaminas] = useState([]);
  const [todosRevestimientos, setTodosRevestimientos] = useState([]);
  const [todosMuebles, setTodosMuebles] = useState([]);
  const [todosVinilos, setTodosVinilos] = useState([]);

  const location = useLocation();
  const productoDestacado = location.state?.producto || null;

  useEffect(() => {
    const cargarProductos = async () => {
      try {
        const [mel, her, rev, mub, vin] = await Promise.all([
          getMelaminas(),
          getHerrajes(),
          getRevestimientos(),
          getMuebles(),
          getVinilos(),
        ]);

        const melNorm = normalizarDatos(mel);
        const herNorm = normalizarDatos(her);
        const revNorm = normalizarDatos(rev);
        const mubNorm = normalizarDatos(mub);
        const vinNorm = normalizarDatos(vin);

        const todosFlat = [
          ...flatten(melNorm),
          ...flatten(herNorm),
          ...flatten(revNorm),
          ...flatten(mubNorm),
          ...flatten(vinNorm),
        ];

        setTodos(todosFlat);
        setTodosMelaminas(flatten(melNorm));
        setTodosHerrajes(flatten(herNorm));
        setTodosRevestimientos(flatten(revNorm));
        setTodosMuebles(flatten(mubNorm));
        setTodosVinilos(flatten(vinNorm));
      } catch (err) {
        console.error("❌ Error al cargar productos:", err);
      }
    };

    cargarProductos();
  }, []);

  return (
    <HomeSection>
      <Banner />

      {productoDestacado && (
        <ContentWrapper>
          <ProductoDestacado producto={productoDestacado} />
        </ContentWrapper>
      )}

      {/* 🧱 Sección: Todos los productos */}
      <ContentWrapper>
        <SectionTitle>Todos los productos</SectionTitle>
        <Subtitle>
          Melaminas | Revestimientos | Herrajes | Muebles | Vinilos
        </Subtitle>
        <Slider data={todos} categoria="productos" />
      </ContentWrapper>

      {/* 🎯 CardHome: Simulador */}
      <ContentWrapper>
        <CardHome {...data.secciones.simulador} />
      </ContentWrapper>

      {/* 📦 Otras secciones */}
      <ContentWrapper>
        <SectionTitle>Herrajes</SectionTitle>
        <CardHome {...data.secciones.herrajes}>
          <Slider data={todosHerrajes} categoria="herrajes" />
        </CardHome>
      </ContentWrapper>

      <ContentWrapper>
        <SectionTitle>Melaminas</SectionTitle>
        <CardHome {...data.secciones.melaminas}>
          <Slider data={todosMelaminas} categoria="melaminas" />
        </CardHome>
      </ContentWrapper>

      <ContentWrapper>
        <SectionTitle>Revestimientos</SectionTitle>
        <CardHome {...data.secciones.revestimiento}>
          <Slider data={todosRevestimientos} categoria="revestimientos" />
        </CardHome>
      </ContentWrapper>

      <ContentWrapper>
        <SectionTitle>Muebles</SectionTitle>
        <CardHome {...data.secciones.muebles}>
          <Slider data={todosMuebles} categoria="muebles" />
        </CardHome>
      </ContentWrapper>

      <ContentWrapper>
        <SectionTitle>Vinilos</SectionTitle>
        <CardHome {...data.secciones.vinilos}>
          <Slider data={todosVinilos} categoria="vinilos" />
        </CardHome>
      </ContentWrapper>
    </HomeSection>
  );
};

export default Home;

// 🔁 Aplanador de productos hoja
const flatten = (nodos, currentPath = []) => {
  const hojas = [];

  const rec = (nodo, path) => {
    const nuevaRuta = [...path, nodo.nombre];

    if (!nodo.children || nodo.children.length === 0) {
      const imagen = nodo.imagenes?.[0] ?? "placeholder.jpg";
      const productoPlano = {
        ...nodo,
        imagen,
        ruta: nuevaRuta.join("/"),
      };
      hojas.push(productoPlano);
    } else {
      nodo.children.forEach((child) => rec(child, nuevaRuta));
    }
  };

  nodos.forEach((n) => rec(n, currentPath));
  return hojas;
};

// 🎨 Estilos
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\melaminas.jsx
────────────────────────────────────────────
import React, { useEffect, useState } from "react";

import { getMelaminas } from "@/api/resources/productsApi";
import Slider from "@/components/ui/Slider";
import Loader from "@/components/ui/Loader";
import { normalizarDatos } from "@/api/utils/normalizeTree";

// Componente principal
const Melaminas = () => {
  const [melaminas, setMelaminas] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const cargar = async () => {
      try {
        const datos = await getMelaminas();
        const normalizados = normalizarDatos(datos);
        const planos = flatten(normalizados);
        setMelaminas(planos);
      } catch (err) {
        console.error("❌ Error al cargar melaminas:", err);
      } finally {
        setLoading(false);
      }
    };

    cargar();
  }, []);

  if (loading) return <Loader />;

  return (
    <Wrapper>
      <Titulo>Melaminas</Titulo>
      <Slider title="Melaminas destacadas" data={melaminas} categoria="melaminas" />

      <Grid>
        {melaminas.map((item) => {
          const imageSrc = item.imagen?.startsWith("http")
            ? item.imagen
            : `http://localhost:4000/products/${item.imagen}`;
          return (
            <Card key={item.id}>
              <CardImage src={imageSrc} alt={item.nombre} loading="lazy" />
              <CardContent>
                <Title>{item.nombre}</Title>
              </CardContent>
            </Card>
          );
        })}
      </Grid>
    </Wrapper>
  );
};

export default Melaminas;

// 🔁 Mismo flatten que en Home.jsx
const flatten = (nodos, currentPath = []) => {
  const hojas = [];

  const rec = (nodo, path) => {
    const nuevaRuta = [...path, nodo.nombre];

    if (!nodo.children || nodo.children.length === 0) {
      const imagen = nodo.imagenes?.[0] ?? "placeholder.jpg";
      const productoPlano = {
        ...nodo,
        imagen,
        ruta: nuevaRuta.join("/"),
      };
      hojas.push(productoPlano);
    } else {
      nodo.children.forEach((child) => rec(child, nuevaRuta));
    }
  };

  nodos.forEach((n) => rec(n, currentPath));
  return hojas;
};

// 🎨 Estilos
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\muebles.jsx
────────────────────────────────────────────
import React, { useEffect, useState } from "react";

import { getMuebles } from "@/api";
import Slider from "@/components/ui/Slider";
import Loader from "@/components/ui/Loader";
import { normalizarDatos } from "@/api/utils/normalizeTree";

export default function MueblesPage() {
  const [muebles, setMuebles] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const cargar = async () => {
      try {
        const datos = await getMuebles();
        const normalizados = normalizarDatos(datos);
        const planos = flatten(normalizados);
        setMuebles(planos);
      } catch (err) {
        console.error("❌ Error al cargar muebles:", err);
      } finally {
        setLoading(false);
      }
    };

    cargar();
  }, []);

  if (loading) return <Loader />;

  return (
    <Container>
      <Titulo>Muebles</Titulo>
      <Slider title="Muebles destacados" data={muebles} categoria="muebles" />

      <Grid>
        {muebles.map((item) => {
          const imageSrc = item.imagen?.startsWith("http")
            ? item.imagen
            : `http://localhost:4000/products/${item.imagen}`;
          return (
            <Card key={item.id}>
              <CardImage src={imageSrc} alt={item.nombre} loading="lazy" />
              <CardContent>
                <Title>{item.nombre}</Title>
              </CardContent>
            </Card>
          );
        })}
      </Grid>
    </Container>
  );
}

// 🔁 Flatten para mantener estructura jerárquica con ruta e imagen destacada
const flatten = (nodos, currentPath = []) => {
  const hojas = [];

  const rec = (nodo, path) => {
    const nuevaRuta = [...path, nodo.nombre];

    if (!nodo.children || nodo.children.length === 0) {
      const imagen = nodo.imagenes?.[0] ?? "placeholder.jpg";
      const productoPlano = {
        ...nodo,
        imagen,
        ruta: nuevaRuta.join("/"),
      };
      hojas.push(productoPlano);
    } else {
      nodo.children.forEach((child) => rec(child, nuevaRuta));
    }
  };

  nodos.forEach((n) => rec(n, currentPath));
  return hojas;
};

// 🎨 Estilos
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\productoCategoria.jsx
────────────────────────────────────────────
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import ProductoDestacado from "@/components/ProductoDestacado";
import {
  getHerrajes,
  getMelaminas,
  getMuebles,
  getRevestimientos,
  getVinilos,
} from "@/api/resources/productsApi";
import { normalizarDatos } from "@/api/utils/normalizeTree";

const APIS = {
  melaminas: getMelaminas,
  herrajes: getHerrajes,
  revestimientos: getRevestimientos,
  muebles: getMuebles,
  vinilos: getVinilos,
};

export default function ProductoCategoria() {
  const { categoria, producto } = useParams();
  const [destacado, setDestacado] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const cargar = async () => {
      setLoading(true);
      const getFn = APIS[categoria.toLowerCase()];
      if (!getFn) return;

      try {
        const data = await getFn();
        const plano = flatten(normalizarDatos(data));

        const match = plano.find((item) =>
          slugify(item.nombre) === slugify(producto)
        );

        setDestacado(match || null);
      } catch (err) {
        console.error("❌ Error al buscar producto:", err);
        setDestacado(null);
      } finally {
        setLoading(false);
      }
    };

    cargar();
  }, [categoria, producto]);

  if (loading) return <div style={{ padding: "2rem" }}>Cargando producto…</div>;
  if (!destacado) return <div style={{ padding: "2rem" }}>Producto no encontrado</div>;

  return <ProductoDestacado producto={destacado} categoria={categoria} />;
}

// 🔁 Versión mejorada del flatten con ruta completa
const flatten = (nodos, currentPath = []) => {
  const hojas = [];

  const rec = (nodo, path) => {
    const nuevaRuta = [...path, nodo.nombre];

    if (!nodo.children || nodo.children.length === 0) {
      const imagenes = nodo.imagenes || [];
      hojas.push({
        ...nodo,
        ruta: nuevaRuta.join("/"), // ✅ RUTA COMPLETA
        imagenes,
      });
    } else {
      nodo.children.forEach((child) => rec(child, nuevaRuta));
    }
  };

  nodos.forEach((n) => rec(n, currentPath));
  return hojas;
};

const slugify = (str = "") =>
  str
    .toLowerCase()
    .normalize("NFD")
    .replace(/\p{Diacritic}/gu, "")
    .replace(/\s+/g, "-")
    .replace(/[^\w-]/g, "");
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\revestimientos.jsx
────────────────────────────────────────────
import React, { useEffect, useState } from "react";

import { getRevestimientos } from "@/api/resources/productsApi";
import Slider from "@/components/ui/Slider";
import Loader from "@/components/ui/Loader";
import { normalizarDatos } from "@/api/utils/normalizeTree";

export default function RevestimientosPage() {
  const [revestimientos, setRevestimientos] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const cargar = async () => {
      try {
        const datos = await getRevestimientos();
        const normalizados = normalizarDatos(datos);
        const planos = flatten(normalizados);
        setRevestimientos(planos);
      } catch (err) {
        console.error("❌ Error al cargar revestimientos:", err);
      } finally {
        setLoading(false);
      }
    };

    cargar();
  }, []);

  if (loading) return <Loader />;

  return (
    <Container>
      <Titulo>Revestimientos</Titulo>

      <Slider
        title="Revestimientos destacados"
        data={revestimientos}
        categoria="revestimientos"
      />

      <Grid>
        {revestimientos.map((item) => {
          const imageSrc = item.imagen?.startsWith("http")
            ? item.imagen
            : `http://localhost:4000/products/${item.imagen}`;

          const categoria = formatearRuta(item.ruta);

          const handleClick = () => {
            const pathParts = item.ruta.split("/").map((p) =>
              p
                .toLowerCase()
                .replace(/\s+/g, "-")
                .replace(/[^\w-]/g, "")
            );
            const slug = pathParts.pop();
            const categoriaSlug = pathParts[0] || "revestimientos";
            const url = `/${categoriaSlug}/${slug}`;

            // ✅ ABRIR EN NUEVA PESTAÑA
            window.open(url, "_blank");
          };

          return (
            <Card key={item.id} onClick={handleClick}>
              <EtiquetaRuta>{categoria}</EtiquetaRuta>
              <CardImage src={imageSrc} alt={item.nombre} loading="lazy" />
              <CardContent>
                <Title>{item.nombre}</Title>
              </CardContent>
            </Card>
          );
        })}
      </Grid>
    </Container>
  );
}

// 🔁 Aplanador de nodos hoja con ruta e imagen correctas
const flatten = (nodos, currentPath = []) => {
  const hojas = [];

  const rec = (nodo, path) => {
    const nuevaRuta = [...path, nodo.nombre];

    if (!nodo.children || nodo.children.length === 0) {
      const imagen = nodo.imagenes?.[0] ?? "placeholder.jpg";
      const productoPlano = {
        ...nodo,
        imagen,
        ruta: nuevaRuta.join("/"),
      };
      hojas.push(productoPlano);
    } else {
      nodo.children.forEach((child) => rec(child, nuevaRuta));
    }
  };

  nodos.forEach((n) => rec(n, currentPath));
  return hojas;
};

// 🔤 Formatea rutas como texto legible
const formatearRuta = (ruta) => {
  return ruta
    .split("/")
    .slice(0, -1)
    .map((segmento) =>
      segmento
        .replace(/-/g, " ")
        .replace(/\b\w/g, (l) => l.toUpperCase())
    )
    .join(" > ");
};

// 🎨 Estilos
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\simulador.jsx
────────────────────────────────────────────
// 📦 Imports principales
import React, { useState, useEffect } from "react";

import {
  getMelaminas,
  getHerrajes,
  getRevestimientos,
  getVinilos,
  getMuebles,
} from "@/api";
import { imagenesSimulador } from "@/data/image/gestorImage";
import Slider from "@/components/ui/Slider";
import { normalizarDatos } from "@/api/utils/normalizeTree";

// 🌐 Ruta base para imágenes
const API_PUBLIC_BASE = import.meta.env.VITE_PUBLIC_BASE || "http://localhost:4000";

// 🧠 Componente principal del simulador visual
const Simulador = () => {
  // Estados principales
  const [productos, setProductos] = useState([]);
  const [otros, setOtros] = useState({
    herrajes: [],
    revestimientos: [],
    vinilos: [],
    muebles: [],
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);
  const [busqueda, setBusqueda] = useState("");
  const [melaminaSeleccionada, setMelaminaSeleccionada] = useState(null);
  const [muebleSeleccionado, setMuebleSeleccionado] = useState("simulador-1");
  const [escalaMelamina, setEscalaMelamina] = useState(100);

  // 🔁 Efecto para cargar todos los productos al montar
  useEffect(() => {
    const cargarDatos = async () => {
      try {
        const [melas, herrajes, revestimientos, vinilos, muebles] =
          await Promise.all([
            getMelaminas(),
            getHerrajes(),
            getRevestimientos(),
            getVinilos(),
            getMuebles(),
          ]);

        // Normaliza los árboles y deja solo los productos hoja
        setProductos(flatten(normalizarDatos(melas)));
        setOtros({
          herrajes: flatten(normalizarDatos(herrajes)),
          revestimientos: flatten(normalizarDatos(revestimientos)),
          vinilos: flatten(normalizarDatos(vinilos)),
          muebles: flatten(normalizarDatos(muebles)),
        });
      } catch (err) {
        console.error("❌ Error al cargar productos:", err);
        setError(true);
      } finally {
        setLoading(false);
      }
    };

    cargarDatos();
  }, []);

  // 🔍 Filtro de búsqueda
  const productosFiltrados = productos.filter((item) =>
    item.nombre.toLowerCase().includes(busqueda.toLowerCase())
  );

  // 📸 Imágenes que se renderizan en el simulador
  const imagenFondo = melaminaSeleccionada?.imagen || null;
  const imagenMueble = imagenesSimulador[muebleSeleccionado];

  // 🧾 Mensajes de carga/error
  if (loading) return <SimuladorArea>Cargando productos...</SimuladorArea>;
  if (error) return <SimuladorArea>Error al cargar productos.</SimuladorArea>;

  return (
    <MainContainer>
      <SimuladorWrapper>
        {/* 📋 Panel lateral de selección */}
        <Menu>
          <Busqueda
            placeholder="Buscar melamina..."
            value={busqueda}
            onChange={(e) => setBusqueda(e.target.value)}
          />

          {/* ⚙ Controles si hay una melamina seleccionada */}
          {melaminaSeleccionada && (
            <>
              <QuitarBoton
                onClick={() => {
                  setMelaminaSeleccionada(null);
                  setBusqueda("");
                }}
              >
                ✕ Quitar melamina
              </QuitarBoton>

              <SliderLabel>Escala del patrón</SliderLabel>
              <SliderInput
                type="range"
                min="40"
                max="200"
                step="10"
                value={escalaMelamina}
                onChange={(e) => setEscalaMelamina(Number(e.target.value))}
              />
            </>
          )}

          {/* 📁 Listado de melaminas */}
          <TituloMenu>Melaminas</TituloMenu>
          {productosFiltrados.map((producto) => (
            <BotonMenu
              key={producto.nombre}
              onClick={() => setMelaminaSeleccionada(producto)}
              $activo={melaminaSeleccionada?.nombre === producto.nombre}
            >
              <ImageCircle
                src={producto.imagen}
                alt={producto.nombre}
                $activo={melaminaSeleccionada?.nombre === producto.nombre}
              />
              <NombreMelamina>{producto.nombre}</NombreMelamina>
            </BotonMenu>
          ))}

          {/* 🪑 Opciones de muebles */}
          <TituloMenu>Muebles</TituloMenu>
          {["simulador-1", "simulador-2"].map((key, i) => (
            <BotonMenu
              key={key}
              onClick={() => setMuebleSeleccionado(key)}
              $activo={muebleSeleccionado === key}
            >
              Mueble {i + 1}
            </BotonMenu>
          ))}
        </Menu>

        {/* 🖼 Zona de simulación visual */}
        <SimuladorArea>
          <SimuladorContenido id="simulador-export">
            {imagenFondo && (
              <MelaminaWrapper $mueble={muebleSeleccionado}>
                <MelaminaFondo $src={imagenFondo} $size={escalaMelamina} />
              </MelaminaWrapper>
            )}
            {imagenMueble && <ImagenMueble src={imagenMueble} alt="Mueble" />}
            {!imagenFondo && (
              <Instruccion>
                Seleccioná una melamina para ver el simulador
              </Instruccion>
            )}
          </SimuladorContenido>
        </SimuladorArea>
      </SimuladorWrapper>

      {/* 🎠 Carruseles de otras categorías */}
      <Carruseles>
        {Object.entries(otros).map(([categoria, items]) => (
          <Slider
            key={categoria}
            title={categoria.toUpperCase()}
            data={items}
            onSelect={() => {}}
          />
        ))}
      </Carruseles>
    </MainContainer>
  );
};

// 🔁 Aplanador de árbol: deja solo productos hoja y agrega la ruta de imagen absoluta
const flatten = (nodos) => {
  const hojas = [];
  const rec = (nodo) => {
    if (!nodo.children || nodo.children.length === 0) {
      hojas.push({
        ...nodo,
        imagen: `${API_PUBLIC_BASE}/products/${nodo.imagenes?.[0] ?? "placeholder.jpg"}`,
      });
    } else {
      nodo.children.forEach(rec);
    }
  };
  nodos.forEach(rec);
  return hojas;
};

export default Simulador;


// 🎨 ESTILOS



























    if ($mueble === "simulador-2") return `width: 55%;`;
    return `width: 100%;`;
  }}
`;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\vinilos.jsx
────────────────────────────────────────────
// 📦 Imports
import React, { useState } from "react"; // Importa React y el hook useState para manejar estados
 // Importa styled-components para definir estilos CSS-in-JS
import useProductos from "@/hooks/useProductos"; // Hook personalizado para manejar carga de productos vía API
import { getVinilos } from "@/api"; // Función que obtiene los vinilos desde el backend (endpoint específico)

// 🌐 Constante que define la base pública del servidor de archivos (ej: imágenes)
const API_PUBLIC_BASE = "http://localhost:4000";

// 🧠 Componente principal que representa la página de vinilos
export default function VinilosPage() {
  // useProductos ejecuta getVinilos internamente y devuelve el estado de carga, error y los datos ya listos
  const { data, loading, error } = useProductos(getVinilos);

  // path: array de IDs que representa la navegación actual en la jerarquía (como un "breadcrumb")
  const [path, setPath] = useState([]);

  // selectedLeaf: guarda el objeto del producto cuando es una hoja (sin hijos)
  const [selectedLeaf, setSelectedLeaf] = useState(null);

  // highlightedImage: almacena cuál imagen está destacada en el modal
  const [highlightedImage, setHighlightedImage] = useState(null);

  // Si la data aún está cargando, mostramos mensaje de espera
  if (loading) return <Container>Cargando vinilos…</Container>;

  // Si hubo un error en la carga, mostramos un mensaje de error
  if (error) return <Container>❌ Error al cargar vinilos</Container>;

  // Normaliza la estructura jerárquica y ajusta rutas de imágenes
  const items = normalizarVinilos(data);

  // Determina qué elementos deben renderizarse según el path actual
  const currentItems = path.reduce(
    (acc, id) => acc.find((x) => x.id === id)?.children || [],
    items
  );

  // Al hacer clic en un ítem:
  // - Si tiene hijos, navegamos más profundo agregando su ID al path
  // - Si no tiene hijos, es una hoja, la seleccionamos y cargamos la imagen destacada
  const handleClick = (item) => {
    if (item.children && item.children.length > 0) {
      setPath([...path, item.id]);
    } else {
      setSelectedLeaf(item);
      setHighlightedImage(item.imagenes?.[0]);
    }
  };

  // Al hacer clic en "Volver":
  // - Si está abierto un producto hoja (modal), lo cerramos
  // - Si no, retrocedemos un nivel en el path
  const handleBack = () => {
    if (selectedLeaf) {
      setSelectedLeaf(null);
      setHighlightedImage(null);
    } else {
      setPath(path.slice(0, -1));
    }
  };

  // Render del componente
  return (
    <Container>
      <Titulo>Vinilos</Titulo>

      {/* Botón de volver solo visible si se está en un subnivel o con un producto abierto */}
      {(path.length > 0 || selectedLeaf) && (
        <BackButton onClick={handleBack}>⬅ Volver</BackButton>
      )}

      {/* Render condicional: si no hay selección, mostramos la grilla. Si hay producto hoja, mostramos modal */}
      {!selectedLeaf ? (
        <Grid>
          {currentItems.map((item) => (
            <Card key={item.id} onClick={() => handleClick(item)}>
              <CardImage src={item.imagenes?.[0]} alt={item.nombre} />
              <CardContent>
                <Title>{item.nombre}</Title>
              </CardContent>
            </Card>
          ))}
        </Grid>
      ) : (
        <ModalContent>
          <ModalImage src={highlightedImage} alt={selectedLeaf.nombre} />
          <ModalInfo>
            <ModalTitle>{selectedLeaf.nombre}</ModalTitle>
            <ModalDesc>{selectedLeaf.descripcion}</ModalDesc>
          </ModalInfo>

          <Slider>
            {selectedLeaf.imagenes.map((img, idx) => (
              <Thumb
                key={idx}
                src={img}
                alt={`thumb-${idx}`}
                onClick={() => setHighlightedImage(img)} // Al hacer clic en una miniatura, se cambia la imagen principal
                isActive={highlightedImage === img} // Marca cuál thumb está activo visualmente
              />
            ))}
          </Slider>
        </ModalContent>
      )}
    </Container>
  );
}

// Esta función transforma recursivamente el árbol de productos
// - Asegura que cada imagen tenga ruta absoluta (`API_PUBLIC_BASE`)
// - Normaliza hijos recursivamente también
const normalizarVinilos = (productos) =>
  productos.map((item) => ({
    ...item,
    imagenes: item.imagenes.map(
      (img) => `${API_PUBLIC_BASE}/products/${img}`
    ),
    children: normalizarVinilos(item.children || []), // Llama a sí misma si hay hijos
  }));
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\utils\slugify.js
────────────────────────────────────────────
// 📦 src/utils/slugify.js

// 🔧 Función utilitaria que transforma cualquier texto en un "slug" amigable para URLs
// Ejemplo: "Mármol Blanco 60x60" → "marmol-blanco-60x60"
export function slugify(text) {
  return text
    .toString() // Asegura que el input sea una cadena de texto (por si viene un número, null, etc.)

    .toLowerCase() // Convierte todo el texto a minúsculas
    // Ej: "Mármol Blanco" → "mármol blanco"

    .normalize("NFD") // Descompone caracteres acentuados (Ñ → N + ~), necesario para quitar tildes
    // Ej: "mármol" → "mármol" (la "á" se convierte en "a" + acento)

    .replace(/[\u0300-\u036f]/g, "") // Elimina cualquier marca de acento (diacríticos Unicode)
    // Ej: "mármol" → "marmol"

    .replace(/\s+/g, "-") // Reemplaza todos los espacios (y tabs) por guiones medios
    // Ej: "marmol blanco" → "marmol-blanco"

    .replace(/[^\w\-]+/g, "") // Elimina cualquier caracter que no sea alfanumérico o guión
    // Ej: "marmol-blanco@" → "marmol-blanco"

    .replace(/\-\-+/g, "-") // Reemplaza múltiples guiones seguidos por uno solo
    // Ej: "marmol--blanco" → "marmol-blanco"

    .replace(/^-+|-+$/g, ""); // Elimina guiones al principio o al final de la cadena
    // Ej: "-marmol-blanco-" → "marmol-blanco"
}
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\App.jsx
────────────────────────────────────────────
// 📄 src/App.jsx — Corregido con lazy loading, rutas dinámicas y componentes persistentes

// 🧩 Imports principales de React y React Router
import React, { Suspense, lazy } from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";

// 🎨 Estilos y componentes persistentes (están siempre en pantalla)
import GlobalStyles from "@/styles/globalStyles";       // Estilos CSS globales (reset, fuentes, etc.)
import Header from "@/components/layout/Header";       // Header que se mantiene en todas las páginas
import Footer from "@/components/layout/Footer";       // Footer persistente
import Cursor from "@/data/components/cursor";         // Cursor personalizado
import Loader from "@/components/ui/Loader";           // Loader para fallback mientras cargan componentes

// 🚀 Lazy loading: importación diferida de páginas
// Evita cargar todo de entrada, mejora performance
const Home = lazy(() => import("@/pages/home"));
const Melaminas = lazy(() => import("@/pages/melaminas"));
const Revestimientos = lazy(() => import("@/pages/revestimientos"));
const Vinilos = lazy(() => import("@/pages/vinilos"));
const Herrajes = lazy(() => import("@/pages/herrajes"));
const Simulador = lazy(() => import("@/pages/simulador"));
const Contactos = lazy(() => import("@/pages/contactos"));
const Muebles = lazy(() => import("@/pages/muebles"));
const Cookies = lazy(() => import("@/components/policies/Cookies"));
const Privacidad = lazy(() => import("@/components/policies/Privacidad"));
const Terminos = lazy(() => import("@/components/policies/Terminos"));
const ProductoCategoria = lazy(() => import("@/pages/ProductoCategoria"));

// 🧠 Componente principal de la app
const App = () => {
  return (
    <div className="App">
      {/* 🧾 Estilos globales aplicados una sola vez al cargar la app */}
      <GlobalStyles />

      {/* 🖱️ Cursor personalizado (probablemente animado o con diseño especial) */}
      <Cursor />

      {/* 🚏 Envolvemos todo en el Router de React Router DOM */}
      <Router>

        {/* 📌 Encabezado persistente en todas las páginas */}
        <Header />

        {/* 💤 Suspense muestra un Loader mientras los componentes lazy se cargan */}
        <Suspense fallback={<Loader />}>

          {/* 🗺️ Definición de rutas usando React Router */}
          <Routes>
            {/* Página de inicio */}
            <Route path="/" element={<Home />} />

            {/* Categorías de productos principales */}
            <Route path="/melaminas" element={<Melaminas />} />
            <Route path="/herrajes" element={<Herrajes />} />
            <Route path="/revestimientos" element={<Revestimientos />} />
            <Route path="/muebles" element={<Muebles />} />
            <Route path="/vinilos" element={<Vinilos />} />

            {/* Herramienta interactiva */}
            <Route path="/simulador" element={<Simulador />} />

            {/* Página de contacto */}
            <Route path="/contactos" element={<Contactos />} />

            {/* 📜 Rutas para políticas legales */}
            <Route path="/cookies" element={<Cookies />} />
            <Route path="/terminos" element={<Terminos />} />
            <Route path="/privacidad" element={<Privacidad />} />

            {/* 🔄 Ruta dinámica para ver un producto individual basado en la categoría y el slug */}
            {/* Ej: /melaminas/roble-amargo */}
            <Route path="/:categoria/:producto" element={<ProductoCategoria />} />

            {/* ❌ Fallback para cualquier ruta no definida */}
            <Route path="*" element={<div style={{ padding: '2rem' }}>Página no encontrada</div>} />
          </Routes>

        </Suspense>

        {/* 📌 Footer persistente al final de todas las páginas */}
        <Footer />
      </Router>
    </div>
  );
};

export default App;
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\package.json
────────────────────────────────────────────
{
  "name": "megamadera",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint ."
  },
  "dependencies": {
    "@fontsource/montserrat": "^5.1.0",
    "@fontsource/playfair-display": "^5.1.0",
    "axios": "^1.10.0",
    "bootstrap": "^5.3.3",
    "html2canvas": "^1.4.1",
    "jspdf": "^3.0.1",
    "lucide-react": "^0.513.0",
    "normalize.css": "^8.0.1",
    "react": "^18.2.0",
    "react-bootstrap": "^2.10.5",
    "react-dom": "^18.2.0",
    "react-icons": "^5.3.0",
    "react-router-dom": "^6.28.0",
    "styled-components": "^6.1.13"
  },
  "devDependencies": {
    "@eslint/js": "^9.11.1",
    "@types/react": "^18.2.20",
    "@types/react-dom": "^18.2.7",
    "@vitejs/plugin-react": "^4.3.2",
    "eslint": "^9.11.1",
    "eslint-plugin-react": "^7.37.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.12",
    "globals": "^15.9.0",
    "vite": "^5.4.8"
  },
  "engines": {
    "node": ">=18",
    "npm": ">=9"
  }
}
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\.env
────────────────────────────────────────────
; VITE_API_BASE=https://backend-megamadera.onrender.com/api
VITE_API_BASE=http://localhost:4000/api

; VITE_PUBLIC_BASE=https://backend-megamadera.onrender.com
VITE_PUBLIC_BASE=http://localhost:4000
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\Vercel.json
────────────────────────────────────────────
{
  "buildCommand": "npm run build",
  "outputDirectory": "dist",
  "framework": "vite"
}
────────────────────────────────────────────


📝 D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\.git
────────────────────────────────────────────
[archivo no encontrado]
────────────────────────────────────────────

Estructura del Proyecto:

üìÅ (Back-end)
‚îÇ
‚îú‚îÄ‚îÄ üìÅ controllers
‚îÇ       ‚îÇ¬†
‚îÇ	‚îú‚îÄ‚îÄ herrajes.controller.js
‚îÇ	‚îú‚îÄ‚îÄ melaminas.controller.js
‚îÇ   ¬†¬†¬†¬†‚îî‚îÄ‚îÄ revestimientos.controller.js        
‚îÇ
‚îú‚îÄ‚îÄ üìÅ models
‚îÇ       ‚îÇ¬†
‚îÇ	‚îú‚îÄ‚îÄ categoria.model.js 
‚îÇ	‚îú‚îÄ‚îÄ herraje.model.js             
‚îÇ	‚îú‚îÄ‚îÄ melaminas.model.js              
‚îÇ   ¬†¬†¬†¬†‚îî‚îÄ‚îÄ revestimiento.model.js  
‚îÇ           
‚îú‚îÄ‚îÄ üìÅ node_modules                 
‚îÇ      
‚îú‚îÄ‚îÄ üìÇ products (imagenes)
‚îÇ       ‚îÇ¬†
‚îÇ   ¬†¬†¬†¬†‚îú‚îÄ‚îÄ üìÇ herrajes
‚îÇ   ¬†¬†¬†¬†‚îÇ¬† ¬†‚îÇ¬†
‚îÇ   ¬†¬†¬†¬†‚îÇ¬† ¬†‚îî‚îÄ‚îÄ üìÇbisagras
‚îÇ       ‚îÇ         ‚îÇ
‚îÇ   ¬†¬†¬†¬†‚îÇ¬† ¬† ¬† ¬†¬†¬†‚îî‚îÄ‚îÄ bisagra-cazoleta-35mm-45g2-1.jpg: http://localhost:4000/products/herrajes/bisagras/bisagra-cazoleta-35mm-45g2-1.jpg
‚îÇ       ‚îÇ¬†
‚îÇ   ¬†¬†¬†¬†‚îú‚îÄ‚îÄ üìÇ melaminas
‚îÇ   ¬†¬†¬†¬†‚îÇ¬† ¬†‚îÇ¬†
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ tekaartico.jpg
‚îÇ	‚îÇ
‚îÇ   ¬†¬†¬†¬†‚îú‚îÄ‚îÄ üìÇ revestimentos:
‚îÇ   ¬†¬†¬†¬†‚îÇ¬† ¬†‚îÇ¬†
‚îÇ   ¬†¬†¬†¬†‚îÇ¬† ¬†‚îî‚îÄ‚îÄ üìÇ pared
‚îÇ       ‚îÇ         ‚îÇ
‚îÇ   ¬†¬†¬†¬†‚îÇ¬† ¬† ¬† ¬†¬†¬†‚îú‚îÄ‚îÄ empapelados
‚îÇ       ‚îÇ         ‚îÇ    ‚îÇ
‚îÇ       ‚îÇ         ‚îÇ    ‚îî‚îÄ‚îÄ amazing
‚îÇ       ‚îÇ         ‚îÇ        ‚îÇ
‚îÇ       ‚îÇ         ‚îÇ        ‚îî‚îÄ‚îÄ amazing-408126-1.jpg: http://localhost:4000/products/revestimientos/pared/empapelados/amazing/amazing-408126-1.jpg
‚îÇ       ‚îÇ         ‚îÇ 
‚îÇ   ¬†¬†¬†¬†‚îÇ¬† ¬† ¬† ¬†¬†¬†‚îî‚îÄ‚îÄ adhesivos: 
‚îÇ       ‚îÇ              ‚îÇ
‚îÇ       ‚îÇ              ‚îî‚îÄ‚îÄ plastiwall-1kg.png: http://localhost:4000/products/revestimientos/pared/adhesivos/plastiwall-1kg.png
‚îÇ       ‚îÇ
‚îÇ       ‚îî‚îÄ‚îÄ vinilos (Aun no descargo las imagenes)
‚îÇ
‚îú‚îÄ‚îÄ üìÅ routes
‚îÇ	‚îú‚îÄ‚îÄ melamians.routes.js
‚îÇ	‚îú‚îÄ‚îÄ herrajes.routes.js
‚îÇ	‚îú‚îÄ‚îÄ productos.routes.js
‚îÇ   ¬†¬†¬†¬†‚îî‚îÄ‚îÄ revestimientos.routes.js
‚îÇ
‚îú‚îÄ‚îÄ üìÅ seed
‚îÇ       ‚îÇ
‚îÇ   ¬†¬†¬†¬†‚îú‚îÄ‚îÄ üìÅ datos
‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ herrajesData.json
‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ melaminaData.json
‚îÇ	‚îÇ	‚îî‚îÄ‚îÄ revestimientosData.json
‚îÇ	‚îÇ
‚îÇ	‚îú‚îÄ‚îÄ herrajes.seed.js
‚îÇ       ‚îú‚îÄ‚îÄ melaminas.seed.js
‚îÇ	‚îî‚îÄ‚îÄ revestimientos.seed.js 
‚îÇ
‚îú‚îÄ‚îÄ üìÑ .env
‚îú‚îÄ‚îÄ üìÑ package.json
‚îú‚îÄ‚îÄ üìÑ package-lock.json
‚îî‚îÄ‚îÄ üìÑ server.js


// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\controllers\\herrajes.controller.js:

import Herraje from '../models/herraje.model.js';
import asyncHandler from 'express-async-handler';


export const obtenerHerrajes = asyncHandler(async (req, res) => {
  const herrajes = await Herraje.find().lean();
  res.status(200).json({ data: herrajes });
});





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\controllers\\melaminas.controller.js:

import asyncHandler from 'express-async-handler';
import Categoria from '../models/melamina.model.js';

export const obtenerMelaminas = asyncHandler(async (req, res) => {
  const data = await Categoria.findOne().lean();
  if (!data || !data.melaminas) {
    res.status(404);
    throw new Error('No hay melaminas cargadas');
  }
  res.status(200).json({ data: data.melaminas });
});





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\controllers\\revestimientos.controller.js:

import asyncHandler from 'express-async-handler';
import Revestimiento from '../models/revestimiento.model.js';

const toKebab = (str) =>
  str.trim().toLowerCase().replace(/\s+/g, '-').normalize("NFD").replace(/[\u0300-\u036f]/g, "");

export const getAll = asyncHandler(async (req, res) => {
  const data = await Revestimiento.find().lean();
  res.json(data);
});

export const create = asyncHandler(async (req, res) => {
  const nuevo = new Revestimiento(req.body);
  await nuevo.save();
  res.status(201).json(nuevo);
});

export const getNormalizado = asyncHandler(async (req, res) => {
  const data = await Revestimiento.find().lean();

  const normalizado = data.flatMap((tipo) =>
    tipo.subtipos.flatMap((sub) =>
      sub.categorias.map((cat) => ({
        path: `${tipo.tipo}/${sub.nombre}/${cat.nombre}`,
        productos: cat.productos,
      }))
    )
  );

  res.json(normalizado);
});





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\models\\categoria.model.js:

// models/categoria.model.js
import mongoose from 'mongoose';

const categoriaSchema = new mongoose.Schema({
  nombre: { type: String, required: true, unique: true },
  descripcion: String
});

const Categoria = mongoose.model('Categoria', categoriaSchema);
export default Categoria;





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\models\\herraje.model.js:

// models/herraje.model.js

import mongoose from 'mongoose';

/**
 * Schema para los productos individuales dentro de una categor√≠a de herraje.
 * Incluye nombre obligatorio, c√≥digo opcional e im√°genes asociadas.
 */
const productoSchema = new mongoose.Schema({
  nombre: { type: String, required: true },
  codigo: { type: String, default: '' },
  imagenes: {
    type: [String],
    default: []
  }
});

/**
 * Schema para una categor√≠a de herrajes.
 * Cada categor√≠a contiene un array de productos.
 */
const herrajeSchema = new mongoose.Schema({
  categoria: { type: String, required: true },
  productos: { type: [productoSchema], default: [] }
});

// Creamos el modelo a partir del schema y lo exportamos
const Herraje = mongoose.model('Herraje', herrajeSchema);
export default Herraje;





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\models\\melamina.model.js:

import mongoose from 'mongoose';

// üì¶ Productos individuales
const productoSchema = new mongoose.Schema({
  nombre: String,
  codigo: String,
  descripcion: String,
  imagenes: [String],
});

// üóÇÔ∏è Subcategor√≠a para melaminas
const subcategoriaSchema = new mongoose.Schema({
  categoria: String,
  productos: [productoSchema],
});

// üóÇÔ∏è Grupo (para revestimientos y fondos)
const grupoSchema = new mongoose.Schema({
  categoria: String,
  subcategorias: [subcategoriaSchema],
});

// ü™µ Categor√≠as principales
const categoriaSchema = new mongoose.Schema({
  melaminas: [subcategoriaSchema],     // Ejemplo: [{ categoria: 'Blancas', productos: [] }]
  revestimientos: [grupoSchema],      // Ejemplo: [{ categoria: 'Pared', subcategorias: [] }]
  fondos: [grupoSchema],              // Ejemplo: [{ categoria: 'Decorativos', subcategorias: [] }]
});

const Categoria = mongoose.model('Categoria', categoriaSchema);

export default Categoria;





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\models\\revestimiento.model.js:

// Importa la librer√≠a Mongoose, que es un ODM para MongoDB
import mongoose from 'mongoose';

// Define un esquema para un producto individual.
// Un producto tiene un nombre (string), un c√≥digo (string) y un array de URLs o nombres de im√°genes (strings).
const productoSchema = new mongoose.Schema({
  nombre: String,            // Nombre del producto
  codigo: String,            // C√≥digo identificador del producto
  imagenes: [String],        // Lista de im√°genes asociadas al producto
});

// Define un esquema para una categor√≠a.
// Una categor√≠a tiene un nombre y un array de productos (cada uno con la estructura definida en productoSchema).
const categoriaSchema = new mongoose.Schema({
  nombre: String,                 // Nombre de la categor√≠a
  productos: [productoSchema],   // Array de productos que pertenecen a esta categor√≠a
});

// Define un esquema para un tipo.
// Un tipo tiene un nombre y un array de categor√≠as (cada una con la estructura definida en categoriaSchema).
const tipoSchema = new mongoose.Schema({
  nombre: String,                 // Nombre del tipo
  categorias: [categoriaSchema], // Array de categor√≠as dentro de este tipo
});

// Define un esquema para un revestimiento completo.
// Un revestimiento tiene un tipo (string) y un array de subtipos (cada uno con la estructura definida en tipoSchema).
const revestimientoSchema = new mongoose.Schema({
  tipo: String,                // Nombre del revestimiento principal
  subtipos: [tipoSchema],      // Lista de subtipos asociados al revestimiento
});

// Crea un modelo de Mongoose basado en el esquema de revestimiento.
// Este modelo permite interactuar con la colecci√≥n 'revestimientos' en MongoDB.
const Revestimiento = mongoose.model('Revestimiento', revestimientoSchema);

// Exporta el modelo para que pueda ser usado en otras partes de la aplicaci√≥n.
export default Revestimiento;





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\routes\\herrajes.routes.js:

// routes/herrajes.routes.js

import express from 'express';
import { obtenerHerrajes } from '../controllers/herrajes.controller.js';

const router = express.Router();

/**
 * Ruta GET para obtener todos los herrajes.
 * Ejemplo: GET /api/herrajes
 */
router.get('/', obtenerHerrajes);

export default router;





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\routes\\melaminas.routes.js:

import express from 'express';
import { obtenerMelaminas } from '../controllers/melaminas.controller.js';

const router = express.Router();

router.get('/', obtenerMelaminas);

export default router;





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\routes\\productos.routes.js:

import express from 'express';
import { obtenerTodosLosProductos } from '../controllers/productos.controller.js';

const router = express.Router();

router.get('/', obtenerTodosLosProductos);

export default router;





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\routes\\revestimientos.routes.js:

import express from "express";
import {
  getAll,
  create,
  getNormalizado,
} from "../controllers/revestimientos.controller.js";

const router = express.Router();

router
  .route("/")
  .get(getAll)
  .post(create);

router.route("/normalizado").get(getNormalizado);

export default router;





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\seed\\herrajes.seed.js:

// seed/herrajes.seed.js

import mongoose from "mongoose";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import Herraje from "../models/herraje.model.js";

dotenv.config();

// Utilidades para obtener el path actual (modo ESModules)
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Ruta al archivo de datos
const filePath = path.resolve(__dirname, "datos", "herrajesData.json");

/**
 * Funci√≥n para poblar la base de datos con herrajes desde el JSON.
 */
async function seedHerrajes() {
  try {
    const rawData = JSON.parse(fs.readFileSync(filePath, "utf-8"));
    const herrajes = rawData.herrajes || [];

    // Procesamos las im√°genes para que incluyan su ruta relativa
    const procesados = herrajes.map((cat) => {
      const categoriaSlug = cat.categoria.toLowerCase().replace(/\s+/g, "-");

      const productos = (cat.productos || []).map((prod) => {
        const imagenes = (prod.imagenes || []).map(
          (img) => `/products/herrajes/${categoriaSlug}/${img}`
        );

        return {
          nombre: prod.nombre,
          codigo: prod.codigo || "",
          imagenes,
        };
      });

      return {
        categoria: cat.categoria,
        productos,
      };
    });

    await mongoose.connect(process.env.MONGO_URI);
    await Herraje.deleteMany(); // Limpieza previa
    await Herraje.insertMany(procesados); // Inserci√≥n de datos nuevos

    console.log("‚úÖ Herrajes insertados correctamente");
    process.exit();
  } catch (error) {
    console.error("‚ùå Error al insertar herrajes:", error);
    process.exit(1);
  }
}

seedHerrajes();





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\seed\\melaminas.seed.js:

// seed/melaminas.seed.js
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import Melamina from '../models/melamina.model.js';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const filePath = path.resolve(__dirname, 'datos', 'melaminasData.json');

async function seedMelaminas() {
  try {
    const rawData = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    const melaminas = rawData.melaminas;

    await mongoose.connect(process.env.MONGO_URI);
    await Melamina.deleteMany();
    await Melamina.insertMany(melaminas);

    console.log('‚úÖ Melaminas insertadas correctamente');
    process.exit();
  } catch (error) {
    console.error('‚ùå Error al insertar melaminas:', error);
    process.exit(1);
  }
}

seedMelaminas();





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\seed\\revestimientos.seed.js:

// seed/revestimientos.seed.js
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import Revestimiento from '../models/revestimiento.model.js';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const filePath = path.resolve(__dirname, 'datos', 'revestimientosData.json');

async function seedRevestimientos() {
  try {
    const rawData = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    const revestimientos = rawData.revestimientos;

    await mongoose.connect(process.env.MONGO_URI);
    await Revestimiento.deleteMany();
    await Revestimiento.insertMany([revestimientos]); // nota: en el archivo es un solo objeto

    console.log('‚úÖ Revestimientos insertados correctamente');
    process.exit();
  } catch (error) {
    console.error('‚ùå Error al insertar revestimientos:', error);
    process.exit(1);
  }
}

seedRevestimientos();





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\seed\\datos\\herrajesData.json:

{
  "herrajes": [
    {
      "categoria": "amortiguadores",
      "productos": [
        {
          "nombre": "Amortiguador Aplicar",
          "codigo": "amortiguador-aplicar",
          "imagenes": ["amortiguador-aplicar1-1.jpg"]
        },
        {
          "nombre": "Amortiguador Embutir Blanco",
          "codigo": "amortiguador-embutir-blanco",
          "imagenes": ["amortiguador-embutir-blanco1-1.jpg"]
        },
        {
          "nombre": "Amortiguador Embutir Largo",
          "codigo": "amortiguador-embutir-largo",
          "imagenes": ["amortiguador-embutir-largo1-1.jpg"]
        },
        {
          "nombre": "Pist√≥n de Gas",
          "codigo": "piston-gas-141",
          "imagenes": ["piston-gas-141-1.jpg"]
        }
      ]
    },
    {
      "categoria": "bisagras",
      "productos": [
        {
          "nombre": "Bisagra Cazoleta 35mm 45g",
          "codigo": "bisagra-cazoleta-35mm-45g",
          "imagenes": [
            "bisagra-cazoleta-35mm-45g1-1.jpg",
            "bisagra-cazoleta-35mm-45g1-2.jpg"
          ]
        },

        {
          "nombre": "Bisagra Cazoleta 35mm 45g 2",
          "codigo": "bisagra-cazoleta-35mm-45g-2",
          "imagenes": [
            "bisagra-cazoleta-35mm-45g2-1.jpg",
            "bisagra-cazoleta-35mm-45g2-2.jpg"
          ]
        },

        {
          "nombre": "Bisagra Cazoleta 35mm Sin Resorte",
          "codigo": "bisagra-cazoleta-35mm-sin-resorte",
          "imagenes": [
            "bisagra-cazoleta-35mm-sin-resorte1-1.jpg",
            "bisagra-cazoleta-35mm-sin-resorte1-2.jpg",
            "bisagra-cazoleta-35mm-sin-resorte1-3.jpg"
          ]
        },
        {
          "nombre": "Bisagra Cazoleta 35mm",
          "codigo": "bisagra-cazoleta-35mm",
          "imagenes": [
            "bisagra-cazoleta-35mm1-1.jpg",
            "bisagra-cazoleta-35mm1-2.jpg",
            "bisagra-cazoleta-35mm1-3.jpg",
            "bisagra-cazoleta-35mm1-4.jpg",
            "bisagra-cazoleta-35mm1-5.jpg"
          ]
        },
        {
          "nombre": "Bisagra Cazoleta 165¬∞ Soft Closing",
          "codigo": "bisagra-cazoleta-165¬∞-soft-closing",
          "imagenes": ["bisagra-cazoleta-165¬∞-soft-closing1-1.jpg"]
        },
        {
          "nombre": "Bisagra Cazoleta 165g",
          "codigo": "bisagra-cazoleta-165g",
          "imagenes": ["bisagra-cazoleta-165g1-1.jpg"]
        },
        {
          "nombre": "Bisagra Cazoleta Acero Inox",
          "codigo": "bisagra-cazoleta-acero-inox",
          "imagenes": [
            "bisagra-cazoleta-acero-inox1-1.jpg",
            "bisagra-cazoleta-acero-inox1-2.jpg"
          ]
        },
        {
          "nombre": "Bisagra Cazoleta √Ångulo Ciego",
          "codigo": "bisagra-cazoleta-angulo-ciego",
          "imagenes": [
            "bisagra-cazoleta-angulo-ciego1-1.jpg",
            "bisagra-cazoleta-angulo-ciego1-2.jpg"
          ]
        },
        {
          "nombre": "Bisagra Cazoleta Articulada",
          "codigo": "bisagra-cazoleta-articulada",
          "imagenes": [
            "bisagra-cazoleta-articulada1-1.jpg",
            "bisagra-cazoleta-articulada1-2.jpg"
          ]
        },
        {
          "nombre": "Bisagra Cazoleta Brazo Corto",
          "codigo": "bisagra-cazoleta-brazo-corto",
          "imagenes": ["bisagra-cazoleta-brazo-corto1-1.jpg"]
        },
        {
          "nombre": "Bisagra Cazoleta Cierre Lento Clip",
          "codigo": "bisagra-cazoleta-cierre-lento-clip",
          "imagenes": [
            "bisagra-cazoleta-cierre-lento-clip1-1.jpg",
            "bisagra-cazoleta-cierre-lento-clip1-2.jpg",
            "bisagra-cazoleta-cierre-lento-clip1-3.jpg",
            "bisagra-cazoleta-cierre-lento-clip1-4.jpg",
            "bisagra-cazoleta-cierre-lento-clip1-5.jpg",
            "bisagra-cazoleta-cierre-lento-clip1-6.jpg"
          ]
        },
        {
          "nombre": "Bisagra Cazoleta Cierre Lento",
          "codigo": "bisagra-cazoleta-cierre-lento",
          "imagenes": [
            "bisagra-cazoleta-cierre-lento1-1.jpg",
            "bisagra-cazoleta-cierre-lento1-2.jpg"
          ]
        },
        {
          "nombre": "Bisagra Cazoleta Cierre Suave Acero Inox",
          "codigo": "bisagra-cazoleta-cierre-suave-acero-inox",
          "imagenes": [
            "bisagra-cazoleta-cierre-suave-acero-inox1-1.jpg",
            "bisagra-cazoleta-cierre-suave-acero-inox1-2.jpg",
            "bisagra-cazoleta-cierre-suave-acero-inox1-3.jpg",
            "bisagra-cazoleta-cierre-suave-acero-inox1-4.jpg"
          ]
        },
        {
          "nombre": "Bisagra Cazoleta Intermedia",
          "codigo": "bisagra-cazoleta-intermedia",
          "imagenes": [
            "bisagra-cazoleta-intermedia1-1.jpg",
            "bisagra-cazoleta-intermedia1-2.jpg"
          ]
        },
        {
          "nombre": "Bisagra Cazoleta Perfil Aluminio",
          "codigo": "bisagra-cazoleta-perfil-aluminio",
          "imagenes": [
            "bisagra-cazoleta-perfil-aluminio1-1.jpg",
            "bisagra-cazoleta-perfil-aluminio1-2.jpg"
          ]
        },
        {
          "nombre": "Bisagra Cazoleta Push Open",
          "codigo": "bisagra-cazoleta-push-open",
          "imagenes": [
            "bisagra-cazoleta-push-open1-1.jpg",
            "bisagra-cazoleta-push-open1-2.jpg"
          ]
        },

        {
          "nombre": "Bisagra Cazoleta",
          "codigo": "bisagra-cazoleta",
          "imagenes": [
            "bisagra-cazoleta1-1.jpg",
            "bisagra-cazoleta1-2.jpg",
            "bisagra-cazoleta1-3.jpg"
          ]
        },
        {
          "nombre": "Bisagra con Autocierre",
          "codigo": "bisagra-con-autocierre",
          "imagenes": [
            "bisagra-con-autocierre1-1.jpg",
            "bisagra-con-autocierre1-2.jpg"
          ]
        },
        {
          "nombre": "Bisagra Doble Contacto",
          "codigo": "bisagra-doble-contacto",
          "imagenes": ["bisagra-doble-contacto1-1.jpg"]
        },
        {
          "nombre": "Bisagra Libro Hierro Bronceado",
          "codigo": "bisagra-libro-hierro-bronceado",
          "imagenes": [
            "bisagra-libro-hierro-bronceado1-1.jpg",
            "bisagra-libro-hierro-bronceado1-2.jpg"
          ]
        },
        {
          "nombre": "Bisagra Oculta Acerada",
          "codigo": "bisagra-oculta-acerada",
          "imagenes": [
            "bisagra-oculta-acerada1-1.jpg",
            "bisagra-oculta-acerada1-2.jpg"
          ]
        },
        {
          "nombre": "Bisagra Oculta PVC",
          "codigo": "bisagra-oculta-pvc",
          "imagenes": ["bisagra-oculta-pvc1-1.jpg", "bisagra-oculta-pvc1-2.jpg"]
        },
        {
          "nombre": "Bisagra para Caja de Habano",
          "codigo": "bisagra-para-caja-de-habano",
          "imagenes": ["bisagra-para-caja-de-habano1-1.jpg"]
        },
        {
          "nombre": "Bisagra Piano",
          "codigo": "bisagra-piano",
          "imagenes": ["bisagra-piano1-1.jpg"]
        },
        {
          "nombre": "Bisagra Pomela 110x55x2.8mm",
          "codigo": "bisagra-pomela-110x55x2.8mm",
          "imagenes": [
            "bisagra-pomela-110x55x2.8mm1-1.jpg",
            "bisagra-pomela-110x55x2.8mm1-2.jpg"
          ]
        },
        {
          "nombre": "Bisagra Pomela Acero Inoxidable",
          "codigo": "bisagra-pomela-acero-inoxidable",
          "imagenes": [
            "bisagra-pomela-acero-inoxidable1-1.jpg",
            "bisagra-pomela-acero-inoxidable1-2.jpg"
          ]
        },
        {
          "nombre": "Bisagra T Hierro",
          "codigo": "bisagra-t-hierro",
          "imagenes": ["bisagra-t-hierro1-1.jpg"]
        }
      ]
    },
    {
      "categoria": "ca√±o-oval",
      "productos": [
        {
          "nombre": "Ca√±o Oval Aluminio Reforzado",
          "codigo": "ca√±o-oval-aluminio-reforzado",
          "imagenes": ["ca√±o-oval-aluminio-reforzado1-1.jpg"]
        },
        {
          "nombre": "Ca√±o Oval Aluminio",
          "codigo": "ca√±o-oval-aluminio",
          "imagenes": ["ca√±o-oval-aluminio1-1.jpg"]
        },
        {
          "nombre": "Ca√±o Oval Liso Cromado",
          "codigo": "ca√±o-oval-liso-cromado",
          "imagenes": ["ca√±o-oval-liso-cromado1-1.jpg"]
        },
        {
          "nombre": "Ca√±o Oval para Tira LED",
          "codigo": "ca√±o-oval-para-tira-led",
          "imagenes": ["ca√±o-oval-para-tira-led1-1.jpg"]
        }
      ]
    },
    {
      "categoria": "cerraduras",
      "productos": [
        {
          "nombre": "Cerradura Caj√≥n Base Cuadrada",
          "codigo": "cerradura-caj√≥n-base-cuadrada",
          "imagenes": [
            "cerradura-caj√≥n-base-cuadrada1-1.jpg",
            "cerradura-caj√≥n-base-cuadrada1-2.jpg"
          ]
        },
        {
          "nombre": "Cerradura Caj√≥n Base Redonda",
          "codigo": "cerradura-caj√≥n-base-redonda",
          "imagenes": [
            "cerradura-caj√≥n-base-redonda1-1.jpg",
            "cerradura-caj√≥n-base-redonda1-2.jpg"
          ]
        },
        {
          "nombre": "Cerradura Caj√≥n Base Romboide",
          "codigo": "cerradura-caj√≥n-base-romboide",
          "imagenes": [
            "cerradura-caj√≥n-base-romboide1-1.jpg",
            "cerradura-caj√≥n-base-romboide1-2.jpg"
          ]
        },
        {
          "nombre": "Cerradura Caj√≥n M√∫ltiple Frontal",
          "codigo": "cerradura-caj√≥n-m√∫ltiple-frontal",
          "imagenes": [
            "cerradura-caj√≥n-m√∫ltiple-frontal1-1.jpg",
            "cerradura-caj√≥n-m√∫ltiple-frontal1-2.jpg"
          ]
        },
        {
          "nombre": "Cerradura Caj√≥n M√∫ltiple Lateral",
          "codigo": "cerradura-caj√≥n-m√∫ltiple-lateral",
          "imagenes": [
            "cerradura-caj√≥n-m√∫ltiple-lateral1-1.jpg",
            "cerradura-caj√≥n-m√∫ltiple-lateral1-2.jpg"
          ]
        },
        {
          "nombre": "Cerradura con Leva L",
          "codigo": "cerradura-con-leva-l",
          "imagenes": [
            "cerradura-con-leva-l1-1.jpg",
            "cerradura-con-leva-l1-2.jpg"
          ]
        },
        {
          "nombre": "Cerradura con Leva y Combinaci√≥n",
          "codigo": "cerradura-con-leva-y-combinaci√≥n",
          "imagenes": [
            "cerradura-con-leva-y-combinaci√≥n1-1.jpg",
            "cerradura-con-leva-y-combinaci√≥n1-2.jpg"
          ]
        },
        {
          "nombre": "Cerradura con Sistema Push Open",
          "codigo": "cerradura-con-sistema-push-open",
          "imagenes": [
            "cerradura-con-sistema-push-open1-1.jpg",
            "cerradura-con-sistema-push-open1-2.jpg"
          ]
        },

        {
          "nombre": "Cerradura de Caj√≥n Liviana",
          "codigo": "cerradura-de-caj√≥n-liviana",
          "imagenes": [
            "cerradura-de-caj√≥n-liviana1-1.jpg",
            "cerradura-de-caj√≥n-liviana1-2.jpg"
          ]
        },
        {
          "nombre": "Cerradura de Empuje",
          "codigo": "cerradura-de-empuje",
          "imagenes": [
            "cerradura-de-empuje1-1.jpg",
            "cerradura-de-empuje1-2.jpg"
          ]
        },
        {
          "nombre": "Cerradura Digital con Huella para Muebles",
          "codigo": "cerradura-digital-con-huella-para-muebles",
          "imagenes": ["cerradura-digital-con-huella-para-muebles1-1.jpg"]
        },
        {
          "nombre": "Cerradura Digital con Tirador y Leva",
          "codigo": "cerradura-digital-con-tirador-y-leva",
          "imagenes": [
            "cerradura-digital-con-tirador-y-leva1-1.jpg",
            "cerradura-digital-con-tirador-y-leva1-2.jpg"
          ]
        },
        {
          "nombre": "Cerradura Digital para Muebles",
          "codigo": "cerradura-digital-para-muebles",
          "imagenes": [
            "cerradura-digital-para-muebles1-1.jpg",
            "cerradura-digital-para-muebles1-2.jpg"
          ]
        },
        {
          "nombre": "Cerradura Leva con Tirador",
          "codigo": "cerradura-leva-con-tirador",
          "imagenes": ["cerradura-leva-con-tirador1-1.jpg"]
        },
        {
          "nombre": "Cerradura Magn√©tica Oculta",
          "codigo": "cerradura-magn√©tica-oculta",
          "imagenes": ["cerradura-magnetica-oculta1-1.jpg"]
        },
        {
          "nombre": "Cerradura para Puerta Vidrio",
          "codigo": "cerradura-para-puerta-vidrio",
          "imagenes": [
            "cerradura-para-puerta-vidrio1-1.jpg",
            "cerradura-para-puerta-vidrio1-2.jpg"
          ]
        },
        {
          "nombre": "Cerradura Tipo Serrucho para Vitrina",
          "codigo": "cerradura-tipo-serrucho-para-vitrina",
          "imagenes": [
            "cerradura-tipo-serrucho-para-vitrina1-1.jpg",
            "cerradura-tipo-serrucho-para-vitrina1-2.jpg"
          ]
        },
        {
          "nombre": "Cerradura Vidrio Doble",
          "codigo": "cerradura-vidrio-doble",
          "imagenes": [
            "cerradura-vidrio-doble1-1.jpg",
            "cerradura-vidrio-doble1-2.jpg"
          ]
        }
      ]
    }
  ]
}





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\seed\\datos\\melaminasData.json:

{
  "melaminas": [
    {
      "categoria": "Nature",
      "productos": [
        {
          "nombre": "Teka Artico",
          "codigo": "teka-artico",
          "imagenes": ["tekaartico.jpg"]
        },
        {
          "nombre": "Venezia",
          "codigo": "venecia",
          "imagenes": ["venecia.jpg"]
        },
        {
          "nombre": "Caj√∫",
          "codigo": "caju",
          "imagenes": ["caju.jpg"]
        },
        {
          "nombre": "Gaud√≠",
          "codigo": "gaudi",
          "imagenes": ["gaudi.jpg"]
        },
        {
          "nombre": "Mont Blanc",
          "codigo": "mont-blanc",
          "imagenes": ["montblanc.jpg"]
        },
        {
          "nombre": "Nogal Terracota",
          "codigo": "nogal-terracota",
          "imagenes": ["nogalterracota.jpg"]
        },
        {
          "nombre": "Carvalho Mezzo",
          "codigo": "carvalho-mezzo",
          "imagenes": ["carvalhomezzo.jpg"]
        },
        {
          "nombre": "Nocce Milano",
          "codigo": "nocce-milano",
          "imagenes": ["noccemilano.jpg"]
        },
        {
          "nombre": "Blanco Nature",
          "codigo": "blanco-nature",
          "imagenes": ["blanconature.jpg"]
        }
      ]
    },
    {
      "categoria": "Lisos",
      "productos": [
        {
          "nombre": "Grafito",
          "codigo": "grafito",
          "imagenes": ["grafito.jpg"]
        },
        {
          "nombre": "Negro Profundo",
          "codigo": "negro-profundo",
          "imagenes": ["negroprofundo.jpg"]
        },
        {
          "nombre": "Gris Humo",
          "codigo": "gris-humo",
          "imagenes": ["grishumo.jpg"]
        },
        {
          "nombre": "Almendra",
          "codigo": "almendra",
          "imagenes": ["almendra.jpg"]
        },
        {
          "nombre": "Aluminio",
          "codigo": "aluminio",
          "imagenes": ["aluminio.jpg"]
        },
        {
          "nombre": "Litio",
          "codigo": "litio",
          "imagenes": ["litio.jpg"]
        },
        {
          "nombre": "Blanco Tundra",
          "codigo": "blanco-tundra",
          "imagenes": ["blancotundra.jpg"]
        }
      ]
    },
    {
      "categoria": "Hilados",
      "productos": [
        {
          "nombre": "Seda Azzurra",
          "codigo": "seda-azzurra",
          "descripcion": "Textura sedosa en azul claro.",
          "imagenes": ["sedaazzurra.jpg"]
        },
        {
          "nombre": "Seda Giorno",
          "codigo": "seda-giorno",
          "descripcion": "Tono claro y suave, ideal para ambientes luminosos.",
          "imagenes": ["sedagiorno.jpg"]
        },
        {
          "nombre": "Seda Notte",
          "codigo": "seda-notte",
          "descripcion": "Oscuro elegante con textura sutil.",
          "imagenes": ["sedanotte.jpg"]
        },
        {
          "nombre": "Lino Chiaro",
          "codigo": "lino-chiaro",
          "descripcion": "Lino claro, tono natural y sereno.",
          "imagenes": ["linochiaro.jpg"]
        },
        {
          "nombre": "Lino Blanco",
          "codigo": "lino-blanco",
          "descripcion": "Lino en blanco puro, ideal para espacios amplios.",
          "imagenes": ["linoblanco.jpg"]
        },
        {
          "nombre": "Lino Terra",
          "codigo": "lino-terra",
          "descripcion": "Lino en tonos tierra, c√°lido y natural.",
          "imagenes": ["linoterra.jpg"]
        },
        {
          "nombre": "Lino Negro",
          "codigo": "lino-negro",
          "descripcion": "Lino oscuro, elegante y moderno.",
          "imagenes": ["linonegro.jpg"]
        }
      ]
    },
    {
      "categoria": "Maderas Clasicas",
      "productos": [
        {
          "nombre": "Roble Dakar Nature",
          "codigo": "roble-dakar-nature",
          "descripcion": "Roble con textura natural y c√°lida.",
          "imagenes": ["robledakarnature.jpg"]
        },
        {
          "nombre": "Roble Americano Nature",
          "codigo": "roble-americano-nature",
          "descripcion": "Madera cl√°sica con vetas suaves.",
          "imagenes": ["robleamericanonature.jpg"]
        },
        {
          "nombre": "Cedro Nature",
          "codigo": "cedro-nature",
          "descripcion": "Tono rojizo con textura natural.",
          "imagenes": ["cedronature.jpg"]
        },
        {
          "nombre": "Roble Dakar Woodtext",
          "codigo": "roble-dakar-woodtext",
          "descripcion": "Textura marcada que imita la madera natural.",
          "imagenes": ["robledakarwoodtext.jpg"]
        },
        {
          "nombre": "Cedro Woodtext",
          "codigo": "cedro-woodtext",
          "descripcion": "Cedro con textura profunda y realista.",
          "imagenes": ["cedrowoodtext.jpg"]
        },
        {
          "nombre": "Ebano Negro",
          "codigo": "ebano-negro",
          "descripcion": "Madera oscura y sofisticada.",
          "imagenes": ["ebanonegro.jpg"]
        },
        {
          "nombre": "Roble Americano Supermate",
          "codigo": "roble-americano-supermate",
          "descripcion": "Roble con acabado ultra mate.",
          "imagenes": ["robleamericanosupermate.jpg"]
        }
      ]
    },
    {
      "categoria": "Mesopotamia",
      "productos": [
        {
          "nombre": "Para√≠so",
          "codigo": "paraiso",
          "descripcion": "Madera clara con vetas suaves y arm√≥nicas.",
          "imagenes": ["paraiso.jpg"]
        },
        {
          "nombre": "Kiri",
          "codigo": "kiri",
          "descripcion": "Tono natural claro con textura liviana.",
          "imagenes": ["kiri.jpg"]
        },
        {
          "nombre": "Jade",
          "codigo": "jade",
          "descripcion": "Color suave con matices verdes minerales.",
          "imagenes": ["jade.jpg"]
        },
        {
          "nombre": "Amatista",
          "codigo": "amatista",
          "descripcion": "Inspirado en piedras preciosas con tono lila.",
          "imagenes": ["amatista.jpg"]
        },
        {
          "nombre": "Gris Tapir",
          "codigo": "gris-tapir",
          "descripcion": "Gris oscuro y elegante con estilo contempor√°neo.",
          "imagenes": ["gristapir.jpg"]
        },
        {
          "nombre": "Gris Basalto",
          "codigo": "gris-basalto",
          "descripcion": "Inspirado en la piedra volc√°nica, de gran sobriedad.",
          "imagenes": ["grisbasalto.jpg"]
        },
        {
          "nombre": "Gris Caliza",
          "codigo": "gris-caliza",
          "descripcion": "Tono neutro y natural, con textura suave.",
          "imagenes": ["griscaliza.jpg"]
        }
      ]
    },
    {
      "categoria": "Urban Concept",
      "productos": [
        {
          "nombre": "Coliseo",
          "codigo": "coliseo",
          "descripcion": "Inspirado en la piedra antigua, con tonos sobrios.",
          "imagenes": ["coliseo.jpg"]
        },
        {
          "nombre": "Amberes",
          "codigo": "amberes",
          "descripcion": "Dise√±o urbano con matices c√°lidos y modernos.",
          "imagenes": ["amberes.jpg"]
        },
        {
          "nombre": "Mosc√∫",
          "codigo": "moscu",
          "descripcion": "Tonos fr√≠os y elegantes, ideal para estilos contempor√°neos.",
          "imagenes": ["moscu.jpg"]
        },
        {
          "nombre": "Street",
          "codigo": "street",
          "descripcion": "Est√©tica urbana con textura de concreto.",
          "imagenes": ["street.jpg"]
        },
        {
          "nombre": "Home",
          "codigo": "home",
          "descripcion": "Dise√±o c√°lido y acogedor para ambientes modernos.",
          "imagenes": ["home.jpg"]
        },
        {
          "nombre": "Praga",
          "codigo": "praga",
          "descripcion": "Inspiraci√≥n cl√°sica europea con tonos suaves.",
          "imagenes": ["praga.jpg"]
        },
        {
          "nombre": "Viena",
          "codigo": "viena",
          "descripcion": "Estilo refinado con colores neutros y c√°lidos.",
          "imagenes": ["viena.jpg"]
        }
      ]
    },
    {
      "categoria": "Blend",
      "productos": [
        {
          "nombre": "Sauco",
          "codigo": "sauco",
          "descripcion": "Dise√±o con tonos oscuros y vetas sofisticadas.",
          "imagenes": ["sauco.jpg"]
        },
        {
          "nombre": "Amaranto",
          "codigo": "amaranto",
          "descripcion": "Color profundo con un estilo c√°lido y moderno.",
          "imagenes": ["amaranto.jpg"]
        },
        {
          "nombre": "Camellia",
          "codigo": "camellia",
          "descripcion": "Tonos rosados con textura delicada y elegante.",
          "imagenes": ["camellia.jpg"]
        },
        {
          "nombre": "Scotch",
          "codigo": "scotch",
          "descripcion": "Inspirado en la madera oscura con car√°cter.",
          "imagenes": ["scotch.jpg"]
        },
        {
          "nombre": "Pinot Gris",
          "codigo": "pinot-gris",
          "descripcion": "Tonos gris√°ceos con un toque vin√≠cola.",
          "imagenes": ["pinotgris.jpg"]
        },
        {
          "nombre": "Merlot",
          "codigo": "merlot",
          "descripcion": "Color intenso y sofisticado, con inspiraci√≥n vin√≠cola.",
          "imagenes": ["merlot.jpg"]
        }
      ]
    },
    {
      "categoria": "√âtnica",
      "productos": [
        {
          "nombre": "Everest",
          "codigo": "everest",
          "descripcion": "Dise√±o fr√≠o y monta√±oso, con textura elegante.",
          "imagenes": ["everest.jpg"]
        },
        {
          "nombre": "Tribal",
          "codigo": "tribal",
          "descripcion": "Estilo con inspiraci√≥n √©tnica y patrones marcados.",
          "imagenes": ["tribal.jpg"]
        },
        {
          "nombre": "Sahara",
          "codigo": "sahara",
          "descripcion": "Tonos c√°lidos y des√©rticos con textura arenosa.",
          "imagenes": ["sahara.jpg"]
        },
        {
          "nombre": "Tuareg",
          "codigo": "tuareg",
          "descripcion": "Inspiraci√≥n n√≥made con dise√±o ex√≥tico.",
          "imagenes": ["tuareg.jpg"]
        },
        {
          "nombre": "Himalaya",
          "codigo": "himalaya",
          "descripcion": "Paleta clara con vetas suaves y fr√≠as.",
          "imagenes": ["himalaya.jpg"]
        },
        {
          "nombre": "Safari",
          "codigo": "safari",
          "descripcion": "Tonos naturales y terrosos, ideal para estilos r√∫sticos.",
          "imagenes": ["safari.jpg"]
        }
      ]
    },
    {
      "categoria": "N√≥rdica",
      "productos": [
        {
          "nombre": "Helsinki",
          "codigo": "helsinki",
          "descripcion": "Dise√±o escandinavo sobrio con tonos claros.",
          "imagenes": ["helsinki.jpg"]
        },
        {
          "nombre": "B√°ltico",
          "codigo": "baltico",
          "descripcion": "Inspirado en maderas n√≥rdicas fr√≠as.",
          "imagenes": ["baltico.jpg"]
        },
        {
          "nombre": "Olmo Finland√©s",
          "codigo": "olmo-finlandes",
          "descripcion": "Madera clara con vetas suaves y c√°lidas.",
          "imagenes": ["olmofinlandes.jpg"]
        },
        {
          "nombre": "Roble Escandinavo",
          "codigo": "roble-escandinavo",
          "descripcion": "Estilo natural con apariencia elegante.",
          "imagenes": ["robleescandinavo.jpg"]
        },
        {
          "nombre": "Teka Oslo",
          "codigo": "teka-oslo",
          "descripcion": "Tono claro con veta delicada y dise√±o minimalista.",
          "imagenes": ["tekaoslo.jpg"]
        }
      ]
    }
  ],
  "revestimientos": [
    {
      "categoria": "Revestimiento",
      "subcategorias": [
        {
          "categoria": "Lisos",
          "productos": [
            {
              "nombre": "Ceniza",
              "codigo": "ceniza",
              "descripcion": "Tono gris claro, neutro y vers√°til, ideal para combinaciones sobrias y modernas.",
              "imagenes": ["ceniza.jpg"]
            },
            {
              "nombre": "Grafito",
              "codigo": "grafito",
              "descripcion": "Color gris oscuro elegante, aporta profundidad y contraste a cualquier dise√±o.",
              "imagenes": ["grafito.jpg"]
            },
            {
              "nombre": "Negro Profundo",
              "codigo": "negro-profundo",
              "descripcion": "Negro intenso y sofisticado, ideal para ambientes de alto impacto visual.",
              "imagenes": ["negroprofundo.jpg"]
            },
            {
              "nombre": "Gris Humo",
              "codigo": "gris-humo",
              "descripcion": "Gris medio con un matiz c√°lido, perfecto para espacios modernos y equilibrados.",
              "imagenes": ["grishumo.jpg"]
            },
            {
              "nombre": "Almendra",
              "codigo": "almendra",
              "descripcion": "Beige suave con matices c√°lidos, ideal para ambientes acogedores y naturales.",
              "imagenes": ["almendra.jpg"]
            },
            {
              "nombre": "Aluminio",
              "codigo": "aluminio",
              "descripcion": "Tono gris met√°lico claro que aporta un toque contempor√°neo y tecnol√≥gico.",
              "imagenes": ["aluminio.jpg"]
            },
            {
              "nombre": "Litio",
              "codigo": "litio",
              "descripcion": "Color neutro claro con un acabado limpio, excelente para espacios minimalistas.",
              "imagenes": ["litio.jpg"]
            },
            {
              "nombre": "Blanco",
              "codigo": "blanco",
              "descripcion": "Blanco puro y luminoso, cl√°sico y vers√°til para todo tipo de combinaciones.",
              "imagenes": ["blanco.jpg"]
            }
          ]
        },
        {
          "categoria": "Nature",
          "productos": [
            {
              "nombre": "Gaud√≠",
              "codigo": "gaudi",
              "descripcion": "Dise√±o de madera c√°lida con vetas org√°nicas que evocan la artesan√≠a y el estilo natural.",
              "imagenes": ["gaudi.jpg"]
            },
            {
              "nombre": "Mont Blanc",
              "codigo": "mont-blanc",
              "descripcion": "Inspirado en las maderas claras europeas, aporta frescura, elegancia y luminosidad al ambiente.",
              "imagenes": ["montblanc.jpg"]
            },
            {
              "nombre": "Teka √Årtico",
              "codigo": "teka-artico",
              "descripcion": "Tonalidad clara con textura de madera teka, perfecta para espacios modernos y serenos.",
              "imagenes": ["tekaartico.jpg"]
            },
            {
              "nombre": "Venezia",
              "codigo": "venecia",
              "descripcion": "Est√©tica sobria con vetas tenues y tonos beige-gris, ideal para un dise√±o elegante y contempor√°neo.",
              "imagenes": ["venecia.jpg"]
            },
            {
              "nombre": "Nogal Terracota",
              "codigo": "nogal-terracota",
              "descripcion": "Color c√°lido con matices rojizos y vetas de nogal que crean un ambiente r√∫stico y acogedor.",
              "imagenes": ["nogalterracota.jpg"]
            },
            {
              "nombre": "Carvalho Mezzo",
              "codigo": "carvalho-mezzo",
              "descripcion": "Madera de tono medio con vetas equilibradas que combinan calidez y naturalidad.",
              "imagenes": ["carvalhomezzo.jpg"]
            },
            {
              "nombre": "Nocce Milano",
              "codigo": "nocce-milano",
              "descripcion": "Nogal oscuro y elegante, con vetas pronunciadas que realzan su car√°cter sofisticado.",
              "imagenes": ["noccemilano.jpg"]
            },
            {
              "nombre": "Blanco Nature",
              "codigo": "blanco-nature",
              "descripcion": "Blanco texturado con leves vetas naturales que aportan claridad y un toque org√°nico.",
              "imagenes": ["blanconature.jpg"]
            }
          ]
        },
        {
          "categoria": "Hilados",
          "productos": [
            {
              "nombre": "Seda Azzurra",
              "codigo": "seda-azzurra",
              "descripcion": "Dise√±o textil con sutil tono azul y textura de seda, ideal para ambientes frescos y refinados.",
              "imagenes": ["sedaazzurra.jpg"]
            },
            {
              "nombre": "Seda Giorno",
              "codigo": "seda-giorno",
              "descripcion": "Acabado tipo seda en tono claro, aporta luminosidad, suavidad y elegancia natural.",
              "imagenes": ["sedagiorno.jpg"]
            },
            {
              "nombre": "Seda Notte",
              "codigo": "seda-notte",
              "descripcion": "Textura suave y tono oscuro que genera contraste y sofisticaci√≥n en espacios contempor√°neos.",
              "imagenes": ["sedanotte.jpg"]
            }
          ]
        },
        {
          "categoria": "Lino",
          "productos": [
            {
              "nombre": "Lino Chiaro",
              "codigo": "lino-chiaro",
              "descripcion": "Inspirado en el lino natural claro, transmite frescura, calma y una est√©tica org√°nica.",
              "imagenes": ["linochiaro.jpg"]
            },
            {
              "nombre": "Lino Blanco",
              "codigo": "lino-blanco",
              "descripcion": "Color blanco con textura de lino, perfecto para ambientes puros y modernos.",
              "imagenes": ["linoblanco.jpg"]
            },
            {
              "nombre": "Lino Terra",
              "codigo": "lino-terra",
              "descripcion": "Tonalidad tierra con textura textil, ideal para lograr calidez y un estilo natural.",
              "imagenes": ["linoterra.jpg"]
            },
            {
              "nombre": "Lino Negro",
              "codigo": "lino-negro",
              "descripcion": "Lino oscuro que aporta contraste, elegancia y un look moderno con textura natural.",
              "imagenes": ["linonegro.jpg"]
            }
          ]
        },
        {
          "categoria": "Mesopotamia",
          "productos": [
            {
              "nombre": "Gris Basalto",
              "codigo": "gris-basalto",
              "descripcion": "Inspirado en la piedra bas√°ltica, este gris oscuro con textura mineral aporta car√°cter y solidez visual.",
              "imagenes": ["grisbasalto.jpg"]
            },
            {
              "nombre": "Gris Caliza",
              "codigo": "gris-caliza",
              "descripcion": "Tono gris claro con efecto p√©treo, ideal para lograr un estilo sobrio y natural.",
              "imagenes": ["griscaliza.jpg"]
            },
            {
              "nombre": "Amatista",
              "codigo": "amatista",
              "descripcion": "Color violeta profundo con sutiles vetas minerales, agrega un toque audaz y elegante al dise√±o.",
              "imagenes": ["amatista.jpg"]
            },
            {
              "nombre": "Gris Tapir",
              "codigo": "gris-tapir",
              "descripcion": "Gris medio con matices terrosos, transmite calidez y un estilo sobrio y equilibrado.",
              "imagenes": ["gristapir.jpg"]
            },
            {
              "nombre": "Jade",
              "codigo": "jade",
              "descripcion": "Tonalidad verde suave con un aire mineral, aporta frescura y un toque distintivo a los espacios.",
              "imagenes": ["jade.jpg"]
            },
            {
              "nombre": "Kiri",
              "codigo": "kiri",
              "descripcion": "Dise√±o claro con textura sutil inspirada en la madera kiri, elegante y contempor√°neo.",
              "imagenes": ["kiri.jpg"]
            },
            {
              "nombre": "Para√≠so",
              "codigo": "paraiso",
              "descripcion": "Color c√°lido con textura natural que evoca ambientes relajados, tropicales y luminosos.",
              "imagenes": ["paraiso.jpg"]
            }
          ]
        },
        {
          "categoria": "Urban Concept",
          "productos": [
            {
              "nombre": "Coliseo",
              "codigo": "coliseo",
              "descripcion": "Dise√±o con textura sutil y tono neutro, inspirado en la arquitectura cl√°sica y urbana de Roma.",
              "imagenes": ["coliseo.jpg"]
            },
            {
              "nombre": "Amberes",
              "codigo": "amberes",
              "descripcion": "Tonalidad gris claro con acabado sobrio, ideal para ambientes modernos y de est√©tica industrial.",
              "imagenes": ["amberes.jpg"]
            },
            {
              "nombre": "Viena",
              "codigo": "viena",
              "descripcion": "Inspirado en el dise√±o europeo, combina elegancia cl√°sica con una textura contempor√°nea.",
              "imagenes": ["viena.jpg"]
            },
            {
              "nombre": "Mosc√∫",
              "codigo": "moscu",
              "descripcion": "Tono oscuro con textura sofisticada que transmite fuerza, car√°cter y modernidad.",
              "imagenes": ["moscu.jpg"]
            },
            {
              "nombre": "Praga",
              "codigo": "praga",
              "descripcion": "Dise√±o c√°lido con matices beige y textura suave, ideal para ambientes acogedores y urbanos.",
              "imagenes": ["praga.jpg"]
            },
            {
              "nombre": "Street",
              "codigo": "street",
              "descripcion": "Dise√±o urbano con textura tipo concreto, perfecto para estilos industriales y contempor√°neos.",
              "imagenes": ["street.jpg"]
            },
            {
              "nombre": "Home",
              "codigo": "home",
              "descripcion": "Acabado c√°lido y neutro que transmite calma y equilibrio, ideal para espacios habitables y funcionales.",
              "imagenes": ["home.jpg"]
            }
          ]
        },
        {
          "categoria": "Blend",
          "productos": [
            {
              "nombre": "Sauco Revestimiento",
              "codigo": "sauco-revestimiento",
              "descripcion": "Tonalidad profunda con matices viol√°ceos, ideal para acentos sofisticados y modernos.",
              "imagenes": ["saucorevestimiento.jpg"]
            },
            {
              "nombre": "Merlot Revestimiento",
              "codigo": "merlot-revestimiento",
              "descripcion": "Inspirado en el color del vino tinto, combina elegancia y calidez con una textura refinada.",
              "imagenes": ["merlotrevestimiento.jpg"]
            },
            {
              "nombre": "Camellia Revestimiento",
              "codigo": "camellia-revestimiento",
              "descripcion": "Rosa suave con un matiz floral delicado, ideal para espacios femeninos y ambientes relajados.",
              "imagenes": ["camelliarevestimiento.jpg"]
            },
            {
              "nombre": "Scotch Revestimiento",
              "codigo": "scotch-revestimiento",
              "descripcion": "Tono marr√≥n con aire c√°lido y r√∫stico, evoca la madera oscura y los interiores cl√°sicos.",
              "imagenes": ["scotchrevestimiento.jpg"]
            },
            {
              "nombre": "Pinot Gris Revestimiento",
              "codigo": "pinot-gris-revestimiento",
              "descripcion": "Gris elegante con matices suaves, aporta un toque contempor√°neo y vers√°til a cualquier espacio.",
              "imagenes": ["pinotgrisrevestimiento.jpg"]
            },
            {
              "nombre": "Amaranto Revestimiento",
              "codigo": "amaranto-revestimiento",
              "descripcion": "Rojo intenso con profundidad visual, ideal para resaltar detalles con fuerza y sofisticaci√≥n.",
              "imagenes": ["amarantorevestimiento.jpg"]
            }
          ]
        },
        {
          "categoria": "Etnica",
          "productos": [
            {
              "nombre": "Tribal Revestimiento",
              "codigo": "tribal-revestimiento",
              "descripcion": "Dise√±o con patrones org√°nicos y tonos terrosos que evocan culturas ancestrales y artesan√≠a √©tnica.",
              "imagenes": ["tribal.jpg"]
            },
            {
              "nombre": "Sahara Revestimiento",
              "codigo": "sahara-revestimiento",
              "descripcion": "Inspirado en los tonos c√°lidos del desierto, transmite calma, calidez y naturalidad.",
              "imagenes": ["saharar.jpg"]
            },
            {
              "nombre": "Tuareg Revestimiento",
              "codigo": "tuareg-revestimiento",
              "descripcion": "Dise√±o con textura y color profundo, inspirado en los pueblos n√≥madas del norte de √Åfrica.",
              "imagenes": ["tuareg.jpg"]
            },
            {
              "nombre": "Himalaya Revestimiento",
              "codigo": "himalaya-revestimiento",
              "descripcion": "Paleta fr√≠a con texturas naturales que evocan las cumbres nevadas y el aire puro de la monta√±a.",
              "imagenes": ["himalaya.jpg"]
            },
            {
              "nombre": "Safari Revestimiento",
              "codigo": "safari-revestimiento",
              "descripcion": "Tonos c√°lidos y textura natural que remiten a paisajes africanos y aventuras ex√≥ticas.",
              "imagenes": ["safari.jpg"]
            },
            {
              "nombre": "Everest Revestimiento",
              "codigo": "everest-revestimiento",
              "descripcion": "Tono claro y fr√≠o, con textura sutil que transmite serenidad, pureza y amplitud visual.",
              "imagenes": ["everest.jpg"]
            }
          ]
        },
        {
          "categoria": "Nordica",
          "productos": [
            {
              "nombre": "Helsinki Revestimiento",
              "codigo": "helsinki-revestimiento",
              "descripcion": "Dise√±o claro con textura sutil de madera, inspirado en la est√©tica minimalista escandinava.",
              "imagenes": ["helsinki.jpg"]
            },
            {
              "nombre": "B√°ltico Revestimiento",
              "codigo": "baltico-revestimiento",
              "descripcion": "Tono gris√°ceo con vetas suaves que evoca los paisajes fr√≠os y sobrios del norte europeo.",
              "imagenes": ["baltico.jpg"]
            },
            {
              "nombre": "Olmo Finland√©s Revestimiento",
              "codigo": "olmo-finlandes-revestimiento",
              "descripcion": "Madera clara con vetas delicadas, ideal para espacios luminosos y de inspiraci√≥n n√≥rdica.",
              "imagenes": ["olmofinlandes.jpg"]
            },
            {
              "nombre": "Roble Escandinavo Revestimiento",
              "codigo": "roble-escandinavo-revestimiento",
              "descripcion": "Roble claro con acabado natural, transmite calidez, simplicidad y estilo contempor√°neo.",
              "imagenes": ["robleescandinavo.jpg"]
            },
            {
              "nombre": "Teka Oslo Revestimiento",
              "codigo": "teka-oslo-revestimiento",
              "descripcion": "Tonalidad media con textura de madera n√≥rdica, equilibrada entre rusticidad y modernidad.",
              "imagenes": ["tekaoslo.jpg"]
            }
          ]
        },
        {
          "categoria": "Maderas Clasicas",
          "productos": [
            {
              "nombre": "Roble Dakar Nature Revestimiento",
              "codigo": "roble-dakar-nature-revestimiento",
              "descripcion": "Roble de tono medio con vetas marcadas, cl√°sico y elegante para ambientes c√°lidos.",
              "imagenes": ["robledakarnature.jpg"]
            },
            {
              "nombre": "Roble Americano Nature Revestimiento",
              "codigo": "roble-americano-nature-revestimiento",
              "descripcion": "Madera robusta de aspecto tradicional, ideal para lograr espacios s√≥lidos y atemporales.",
              "imagenes": ["robleamericanonature.jpg"]
            },
            {
              "nombre": "Cedro Nature Revestimiento",
              "codigo": "cedro-nature-revestimiento",
              "descripcion": "Color rojizo suave y textura natural, aporta calidez y distinci√≥n con un aire cl√°sico.",
              "imagenes": ["cedronature.jpg"]
            }
          ]
        }
      ]
    }
  ],
  "fondos": [
    {
      "categoria": "Fondo",
      "subcategorias": [
        {
          "categoria": "Lisos",
          "productos": [
            {
              "nombre": "Ceniza Fondo",
              "codigo": "ceniza-fondo",
              "descripcion": "Fondo liso en tono gris claro, ideal como base neutra y vers√°til.",
              "imagenes": ["cenizafondo.jpg"]
            },
            {
              "nombre": "Grafito Fondo",
              "codigo": "grafito-fondo",
              "descripcion": "Gris oscuro de textura uniforme, aporta profundidad y modernidad.",
              "imagenes": ["grafitofondo.jpg"]
            },
            {
              "nombre": "Negro Profundo Fondo",
              "codigo": "negro-profundo-fondo",
              "descripcion": "Fondo completamente negro, elegante y de alto contraste.",
              "imagenes": ["negroprofundofondo.jpg"]
            },
            {
              "nombre": "Almendra Fondo",
              "codigo": "almendra-fondo",
              "descripcion": "Beige c√°lido y suave, ideal para crear ambientes acogedores.",
              "imagenes": ["almendrafondo.jpg"]
            },
            {
              "nombre": "Blanco Fondo",
              "codigo": "blanco-fondo",
              "descripcion": "Blanco neutro y puro, excelente como base para todo tipo de combinaciones.",
              "imagenes": ["blancofondo.jpg"]
            }
          ]
        },
        {
          "categoria": "Nature",
          "productos": [
            {
              "nombre": "Teka Artico Fondo",
              "codigo": "teka-artico-fondo",
              "descripcion": "Madera clara con vetas sutiles, ideal como fondo natural y luminoso.",
              "imagenes": ["tekaarticofondo.jpg"]
            },
            {
              "nombre": "Venezia Fondo",
              "codigo": "venecia-fondo",
              "descripcion": "Dise√±o con textura de madera c√°lida, ideal para espacios cl√°sicos y contempor√°neos.",
              "imagenes": ["veneciafondo.jpg"]
            },
            {
              "nombre": "Carvalho Mezzo Fondo",
              "codigo": "carvalho-mezzo-fondo",
              "descripcion": "Madera de tono medio con vetas visibles, equilibrio entre sobriedad y calidez.",
              "imagenes": ["carvalhomezzofondo.jpg"]
            },
            {
              "nombre": "Nocce Milano Fondo",
              "codigo": "nocce-milano-fondo",
              "descripcion": "Fondo amaderado oscuro con textura rica, ideal para ambientes elegantes.",
              "imagenes": ["noccemilanofondo.jpg"]
            }
          ]
        },
        {
          "categoria": "Hilados",
          "productos": [
            {
              "nombre": "Seda Giorno Fondo",
              "codigo": "seda-giorno-fondo",
              "descripcion": "Fondo textil claro con textura sedosa, aporta suavidad y frescura visual.",
              "imagenes": ["sedagiornofondo.jpg"]
            },
            {
              "nombre": "Seda Notte Fondo",
              "codigo": "seda-notte-fondo",
              "descripcion": "Tono oscuro con textura de seda, transmite elegancia y sobriedad.",
              "imagenes": ["sedanottefondo.jpg"]
            },
            {
              "nombre": "Lino Chiaro Fondo",
              "codigo": "lino-chiaro-fondo",
              "descripcion": "Fondo textil claro y natural, con apariencia fresca y relajada.",
              "imagenes": ["linochiarofondo.jpg"]
            }
          ]
        },
        {
          "categoria": "Maderas Clasicas",
          "productos": [
            {
              "nombre": "Roble Dakar Woodtext Fondo",
              "codigo": "roble-dakar-woodtext-fondo",
              "descripcion": "Madera cl√°sica de tono medio, con textura marcada y estilo atemporal.",
              "imagenes": ["robledakarwoodtextfondo.jpg"]
            },
            {
              "nombre": "Cedro Woodtext Fondo",
              "codigo": "cedro-woodtext-fondo",
              "descripcion": "Tono c√°lido rojizo con vetas pronunciadas, perfecto para fondos elegantes.",
              "imagenes": ["cedrowoodtextfondo.jpg"]
            },
            {
              "nombre": "Ebano Negro Fondo",
              "codigo": "ebano-negro-fondo",
              "descripcion": "Madera oscura y sofisticada con acabado profundo, ideal para contrastes fuertes.",
              "imagenes": ["ebanonegrofondo.jpg"]
            }
          ]
        },
        {
          "categoria": "Nordica",
          "productos": [
            {
              "nombre": "Helsinki Fondo",
              "codigo": "helsinki-fondo",
              "descripcion": "Madera clara con est√©tica limpia y serena, ideal para ambientes n√≥rdicos y modernos.",
              "imagenes": ["helsinkifondo.jpg"]
            },
            {
              "nombre": "B√°ltico Fondo",
              "codigo": "baltico-fondo",
              "descripcion": "Fondo de tono gris√°ceo suave, inspirado en paisajes fr√≠os y minimalistas.",
              "imagenes": ["balticofondo.jpg"]
            }
          ]
        }
      ]
    }
  ]
}






// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\seed\\datos\\revestimientosData.json:

{
  "revestimientos": {
    "pared": {
      "adhesivos": {
        "productos": [
          {
            "nombre": "Plastiwall 1kg",
            "codigo": "plastiwall-1kg",
            "imagenes": ["plastiwall-1kg.png"]
          },
          {
            "nombre": "Plastiwall 4kg",
            "codigo": "plastiwall-4kg",
            "imagenes": ["plastiwall-4kg.png"]
          },
          {
            "nombre": "Plastiwall 10kg",
            "codigo": "plastiwall-10kg",
            "imagenes": ["plastiwall-10kg.png"]
          }
        ]
      },
      "ceramicos y wallstickers": {
        "ceramicos venecitas azulejos": {
          "productos": [
            {
              "nombre": "Azulejo 16211",
              "codigo": "azulejo-16211",
              "imagenes": ["azulejo-16211-1.png", "azulejo-16211-2.png"]
            },
            {
              "nombre": "Azulejo 16221",
              "codigo": "azulejo-16221",
              "imagenes": ["azulejo-16221-1.png", "azulejo-16221-2.png"]
            },
            {
              "nombre": "Azulejo 16231",
              "codigo": "azulejo-16231",
              "imagenes": ["azulejo-16231-1.png", "azulejo-16231-2.png"]
            },
            {
              "nombre": "Azulejo 16601",
              "codigo": "azulejo-16601",
              "imagenes": ["azulejo-16601-1.png", "azulejo-16601-2.png"]
            },
            {
              "nombre": "Azulejo 16641",
              "codigo": "azulejo-16641",
              "imagenes": ["azulejo-16641-1.png", "azulejo-16641-2.png"]
            },
            {
              "nombre": "Azulejo 16651",
              "codigo": "azulejo-16651",
              "imagenes": [
                "azulejo-16651-1.jpg",
                "azulejo-16651-2.jpg",
                "azulejo-16651-3.jpg",
                "azulejo-16651-4.jpg",
                "azulejo-16651-5.jpg"
              ]
            },
            {
              "nombre": "Ceramico Calareo 16581",
              "codigo": "ceramico-calareo-16581",
              "imagenes": [
                "ceramico-calareo-16581-1.jpg",
                "ceramico-calareo-16581-2.png",
                "ceramico-calareo-16581-3.jpg"
              ]
            },
            {
              "nombre": "Ceramico Carrara 16661",
              "codigo": "ceramico-carrara-16661",
              "imagenes": [
                "ceramico-carrara-16661-1.jpg",
                "ceramico-carrara-16661-2.jpg",
                "ceramico-carrara-16661-3.jpg",
                "ceramico-carrara-16661-4.jpg",
                "ceramico-carrara-16661-5.jpg"
              ]
            },
            {
              "nombre": "Ceramico Damero 16681",
              "codigo": "ceramico-damero-16681",
              "imagenes": [
                "ceramico-damero-16681-1.jpg",
                "ceramico-damero-16681-2.jpg",
                "ceramico-damero-16681-3.jpg",
                "ceramico-damero-16681-4.jpg"
              ]
            },
            {
              "nombre": "Ceramico Espiga Verde",
              "codigo": "ceramico-espiga-verde",
              "imagenes": [
                "ceramico-espiga-verde-1.png",
                "ceramico-espiga-verde-2.jpg",
                "ceramico-espiga-verde-3.jpg",
                "ceramico-espiga-verde-4.jpg"
              ]
            },
            {
              "nombre": "Ceramico Imperial 16671",
              "codigo": "ceramico-imperial-16671",
              "imagenes": [
                "ceramico-imperial-16671-1.jpg",
                "ceramico-imperial-16671-2.jpg",
                "ceramico-imperial-16671-3.jpg",
                "ceramico-imperial-16671-4.jpg",
                "ceramico-imperial-16671-5.jpg"
              ]
            },
            {
              "nombre": "Ceramico Subway 16531",
              "codigo": "ceramico-subway-16531",
              "imagenes": [
                "ceramico-subway-16531-1.jpg",
                "ceramico-subway-16531-2.png",
                "ceramico-subway-16531-3.png",
                "ceramico-subway-16531-4.jpg",
                "ceramico-subway-16531-5.jpg"
              ]
            },
            {
              "nombre": "Ceramico Subway Negro 16532",
              "codigo": "ceramico-subway-negro-16532",
              "imagenes": [
                "ceramico-subway-negro-16532-1.jpg",
                "ceramico-subway-negro-16532-2.jpg",
                "ceramico-subway-negro-16532-3.jpg",
                "ceramico-subway-negro-16532-4.png",
                "ceramico-subway-negro-16532-5.jpg",
                "ceramico-subway-negro-16532-6.jpg",
                "ceramico-subway-negro-16532-7.jpg"
              ]
            },
            {
              "nombre": "Ceramico Terrozo 16541",
              "codigo": "ceramico-terrozo-16541",
              "imagenes": [
                "ceramico-terrozo-16541-1.png",
                "ceramico-terrozo-16541-2.png"
              ]
            },
            {
              "nombre": "Hex Blanco 16592",
              "codigo": "hex-blanco-16592",
              "imagenes": ["hex-blanco-16592-5.png"]
            },
            {
              "nombre": "Hexa Blanco 16592",
              "codigo": "hexa-blanco-16592",
              "imagenes": [
                "hexa-blanco-16592-1.jpg",
                "hexa-blanco-16592-2.jpg",
                "hexa-blanco-16592-3.jpg",
                "hexa-blanco-16592-4.png"
              ]
            },
            {
              "nombre": "Hexa Negro 16591",
              "codigo": "hexa-negro-16591",
              "imagenes": [
                "hexa-negro-16591-1.jpg",
                "hexa-negro-16591-2.jpg",
                "hexa-negro-16591-3.jpg",
                "hexa-negro-16591-4.jpg",
                "hexa-negro-16591-5.jpg"
              ]
            },
            {
              "nombre": "Venecita Clasica 13201",
              "codigo": "venecita-clasica-13201",
              "imagenes": [
                "venecita-clasica-13201-1.png",
                "venecita-clasica-13201-2.png"
              ]
            },
            {
              "nombre": "Venecita Geometrica 13221",
              "codigo": "venecita-geometrica-13221",
              "imagenes": [
                "venecita-geometrica-13221-1.png",
                "venecita-geometrica-13221-2.png"
              ]
            },
            {
              "nombre": "Venecita Romantica 13231",
              "codigo": "venecita-romantica-13231",
              "imagenes": [
                "venecita-romantica-13231-1.png",
                "venecita-romantica-13231-2.png"
              ]
            }
          ]
        },
        "wallstickers": {
          "productos": [
            {
              "nombre": "Alce 16621",
              "codigo": "alce-16621",
              "imagenes": ["alce-16621-1.png", "alce-16621-2.png"]
            },
            {
              "nombre": "Arcoiris 16701",
              "codigo": "arcoiris-16701",
              "imagenes": ["arcoiris-16701-1.jpg", "arcoiris-16701-2.jpg"]
            },
            {
              "nombre": "Caritas 16631",
              "codigo": "caritas-16631",
              "imagenes": ["caritas-16631-1.png", "caritas-16631-2.png"]
            },
            {
              "nombre": "Etnico 16291",
              "codigo": "etnico-16291",
              "imagenes": ["etnico-16291-1.png", "etnico-16291-2.png"]
            },
            {
              "nombre": "Familia 16571",
              "codigo": "familia-16571",
              "imagenes": ["familia-16571-1.png", "familia-16571-2.png"]
            },
            {
              "nombre": "Food 16691",
              "codigo": "food-16691",
              "imagenes": ["food-16691-1.jpg", "food-16691-2.jpg"]
            },
            {
              "nombre": "Frase Nunca 16711",
              "codigo": "frase-nunca-16711",
              "imagenes": ["frase-nunca-16711-1.jpg", "frase-nunca-16711-2.jpg"]
            },
            {
              "nombre": "Frases 16501",
              "codigo": "frases-16501",
              "imagenes": ["frases-16501-1.png", "frases-16501-2.png"]
            },
            {
              "nombre": "Frases Sue√±os 16561",
              "codigo": "frases-sue√±os-16561",
              "imagenes": [
                "frases-sue√±os-16561-1.png",
                "frases-sue√±os-16561-2.png"
              ]
            },
            {
              "nombre": "Mariposas 16031",
              "codigo": "mariposas-16031",
              "imagenes": ["mariposas-16031-1.png", "mariposas-16031-2.png"]
            }
          ]
        }
      },
      "empapelados": {
        "amazing": {
          "productos": [
            {
              "nombre": "Amazing 408126",
              "codigo": "amazing-408126",
              "imagenes": ["amazing-408126-1.jpg", "amazing-408126-2.jpg"]
            },
            {
              "nombre": "Amazing 408171",
              "codigo": "amazing-408171",
              "imagenes": ["amazing-408171-1.jpg", "amazing-408171-2.jpg"]
            },
            {
              "nombre": "Amazing 409437",
              "codigo": "amazing-409437",
              "imagenes": ["amazing-409437-1.jpg", "amazing-409437-2.jpg"]
            },
            {
              "nombre": "Amazing 418415",
              "codigo": "amazing-418415",
              "imagenes": ["amazing-418415-1.jpg", "amazing-418415-2.jpg"]
            },
            {
              "nombre": "Amazing 418460",
              "codigo": "amazing-418460",
              "imagenes": ["amazing-418460-1.jpg"]
            },
            {
              "nombre": "Amazing 418477",
              "codigo": "amazing-418477",
              "imagenes": ["amazing-418477-1.jpg", "amazing-418477-2.jpg"]
            },
            {
              "nombre": "Amazing 418712",
              "codigo": "amazing-418712",
              "imagenes": ["amazing-418712-1.jpg", "amazing-418712-2.jpg"]
            },
            {
              "nombre": "Amazing 423990",
              "codigo": "amazing-423990",
              "imagenes": ["amazing-423990-1.jpg"]
            },
            {
              "nombre": "Amazing 424003",
              "codigo": "amazing-424003",
              "imagenes": ["amazing-424003-1.jpg"]
            },
            {
              "nombre": "Amazing 424034",
              "codigo": "amazing-424034",
              "imagenes": ["amazing-424034-1.jpg"]
            },
            {
              "nombre": "Amazing 424072",
              "codigo": "amazing-424072",
              "imagenes": ["amazing-424072-1.jpg"]
            },
            {
              "nombre": "Amazing 428209",
              "codigo": "amazing-428209",
              "imagenes": ["amazing-428209-1.jpg"]
            },
            {
              "nombre": "Amazing 428216",
              "codigo": "amazing-428216",
              "imagenes": ["amazing-428216-1.jpg", "amazing-428216-2.jpg"]
            },
            {
              "nombre": "Amazing 428407",
              "codigo": "amazing-428407",
              "imagenes": ["amazing-428407-1.jpg"]
            },
            {
              "nombre": "Amazing 428414",
              "codigo": "amazing-428414",
              "imagenes": ["amazing-428414-1.jpg", "amazing-428414-2.jpg"]
            },
            {
              "nombre": "Amazing 429213",
              "codigo": "amazing-429213",
              "imagenes": ["amazing-429213-1.jpg"]
            },
            {
              "nombre": "Amazing 429220",
              "codigo": "amazing-429220",
              "imagenes": ["amazing-429220-1.jpg"]
            },
            {
              "nombre": "Amazing 429237",
              "codigo": "amazing-429237",
              "imagenes": ["amazing-429237-1.jpg"]
            },
            {
              "nombre": "Amazing 429244",
              "codigo": "amazing-429244",
              "imagenes": ["amazing-429244-1.jpg"]
            },
            {
              "nombre": "Amazing 429251",
              "codigo": "amazing-429251",
              "imagenes": ["amazing-429251-1.jpg"]
            },
            {
              "nombre": "Amazing 429268",
              "codigo": "amazing-429268",
              "imagenes": ["amazing-429268-1.jpg"]
            },
            {
              "nombre": "Amazing 429329",
              "codigo": "amazing-429329",
              "imagenes": ["amazing-429329-1.jpg"]
            },
            {
              "nombre": "Amazing 531329",
              "codigo": "amazing-531329",
              "imagenes": ["amazing-531329-1.jpg", "amazing-531329-2.jpg"]
            },
            {
              "nombre": "Amazing 531336",
              "codigo": "amazing-531336",
              "imagenes": ["amazing-531336-1.jpg", "amazing-531336-2.jpg"]
            },
            {
              "nombre": "Amazing 531350",
              "codigo": "amazing-531350",
              "imagenes": ["amazing-531350-1.jpg", "amazing-531350-2.jpg"]
            },
            {
              "nombre": "Amazing 531367",
              "codigo": "amazing-531367",
              "imagenes": ["amazing-531367-1.jpg"]
            },
            {
              "nombre": "Amazing 531381",
              "codigo": "amazing-531381",
              "imagenes": ["amazing-531381-1.jpg", "amazing-531381-2.jpg"]
            },
            {
              "nombre": "Amazing 531398",
              "codigo": "amazing-531398",
              "imagenes": ["amazing-531398-1.jpg"]
            },
            {
              "nombre": "Amazing 531404",
              "codigo": "amazing-531404",
              "imagenes": ["amazing-531404-1.jpg", "amazing-531404-2.jpg"]
            },
            {
              "nombre": "Amazing 531442",
              "codigo": "amazing-531442",
              "imagenes": ["amazing-531442-1.jpg"]
            },
            {
              "nombre": "Amazing 531459",
              "codigo": "amazing-531459",
              "imagenes": ["amazing-531459-1.jpg"]
            },
            {
              "nombre": "Amazing 531466",
              "codigo": "amazing-531466",
              "imagenes": ["amazing-531466-1.jpg"]
            },
            {
              "nombre": "Amazing 537901",
              "codigo": "amazing-537901",
              "imagenes": ["amazing-537901-1.jpg", "amazing-537901-2.jpg"]
            },
            {
              "nombre": "Amazing 537918",
              "codigo": "amazing-537918",
              "imagenes": ["amazing-537918-1.jpg", "amazing-537918-2.jpg"]
            },
            {
              "nombre": "Amazing 537925",
              "codigo": "amazing-537925",
              "imagenes": ["amazing-537925-1.jpg"]
            },
            {
              "nombre": "Amazing 537932",
              "codigo": "amazing-537932",
              "imagenes": ["amazing-537932-1.jpg", "amazing-537932-2.jpg"]
            },
            {
              "nombre": "Amazing 539301",
              "codigo": "amazing-539301",
              "imagenes": ["amazing-539301-1.jpg", "amazing-539301-2.jpg"]
            },
            {
              "nombre": "Amazing 539356",
              "codigo": "amazing-539356",
              "imagenes": ["amazing-539356-1.jpg", "amazing-539356-2.jpg"]
            },
            {
              "nombre": "Amazing 539462",
              "codigo": "amazing-539462",
              "imagenes": ["amazing-539462-1.jpg", "amazing-539462-2.jpg"]
            },
            {
              "nombre": "Amazing 539646",
              "codigo": "amazing-539646",
              "imagenes": ["amazing-539646-1.jpg", "amazing-539646-2.jpg"]
            },
            {
              "nombre": "Amazing 539660",
              "codigo": "amazing-539660",
              "imagenes": ["amazing-539660-1.jpg", "amazing-539660-2.jpg"]
            },
            {
              "nombre": "Amazing 539943",
              "codigo": "amazing-539943",
              "imagenes": ["amazing-539943-1.jpg", "amazing-539943-2.jpg"]
            },
            {
              "nombre": "Amazing 541243",
              "codigo": "amazing-541243",
              "imagenes": ["amazing-541243-1.jpg", "amazing-541243-2.jpg"]
            },
            {
              "nombre": "Amazing 541274",
              "codigo": "amazing-541274",
              "imagenes": ["amazing-541274-1.jpg", "amazing-541274-2.jpg"]
            },
            {
              "nombre": "Amazing 542424",
              "codigo": "amazing-542424",
              "imagenes": ["amazing-542424-1.jpg"]
            },
            {
              "nombre": "Amazing 543018",
              "codigo": "amazing-543018",
              "imagenes": ["amazing-543018-1.jpg"]
            },
            {
              "nombre": "Amazing 543315",
              "codigo": "amazing-543315",
              "imagenes": ["amazing-543315-1.jpg"]
            },
            {
              "nombre": "Amazing 617115",
              "codigo": "amazing-617115",
              "imagenes": ["amazing-617115-1.jpg"]
            },
            {
              "nombre": "Amazing 617122",
              "codigo": "amazing-617122",
              "imagenes": ["amazing-617122-1.jpg"]
            },
            {
              "nombre": "Amazing 617146",
              "codigo": "amazing-617146",
              "imagenes": ["amazing-617146-1.jpg"]
            },
            {
              "nombre": "Amazing 617177",
              "codigo": "amazing-617177",
              "imagenes": ["amazing-617177-1.jpg", "amazing-617177-2.jpg"]
            },
            {
              "nombre": "Amazing 617184",
              "codigo": "amazing-617184",
              "imagenes": ["amazing-617184-1.jpg"]
            },
            {
              "nombre": "Amazing 617191",
              "codigo": "amazing-617191",
              "imagenes": ["amazing-617191-1.jpg"]
            },
            {
              "nombre": "Amazing 617429",
              "codigo": "amazing-617429",
              "imagenes": ["amazing-617429-1.jpg", "amazing-617429-2.jpg"]
            },
            {
              "nombre": "Amazing 617443",
              "codigo": "amazing-617443",
              "imagenes": [
                "amazing-617443-1.jpg",
                "amazing-617443-2.jpg",
                "amazing-617443-3.jpg",
                "amazing-617443-4.jpg"
              ]
            },
            {
              "nombre": "Amazing 617948",
              "codigo": "amazing-617948",
              "imagenes": ["amazing-617948-1.jpg", "amazing-617948-2.jpg"]
            },
            {
              "nombre": "Amazing 617955",
              "codigo": "amazing-617955",
              "imagenes": ["amazing-617955-1.jpg", "amazing-617955-2.jpg"]
            }
          ]
        },
        "aura": {
          "productos": [
            {
              "nombre": "Aura 8604",
              "codigo": "aura-8604",
              "imagenes": ["aura-8604-1.jpg", "aura-8604-2.jpg"]
            },
            {
              "nombre": "Aura 8611",
              "codigo": "aura-8611",
              "imagenes": ["aura-8611-1.jpg", "aura-8611-2.jpg"]
            },
            {
              "nombre": "Aura 8612",
              "codigo": "aura-8612",
              "imagenes": ["aura-8612-1.jpg", "aura-8612-2.jpg"]
            }
          ]
        }
      }
    }


  }
}





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\.env:

MONGO_URI=mongodb+srv://grecolucianogabriel:hMqtEVCXFx9pqSI0@cluster0.5fd0etk.mongodb.net/megamadera?retryWrites=true&w=majority&appName=Cluster0
PORT=4000





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\package.json:

{
  "name": "api-megamadera",
  "version": "1.0.0",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "seed:herrajes": "node seed/herrajes.seed.js",
    "seed:melaminas": "node seed/melaminas.seed.js",
    "seed:revestimientos": "node seed/revestimientos.seed.js"
  },
  "dependencies": {
    "compression": "^1.8.0",
    "cors": "^2.8.5",
    "dotenv": "^16.5.0",
    "express": "^5.1.0",
    "express-async-handler": "^1.2.0",
    "mongoose": "^8.16.0"
  },
  "devDependencies": {
    "nodemon": "^3.1.10"
  }
}





// Ruta: D:\\Empresas\\Programacion\\Proyectos\\MegaMadera\\Backend\\server.js:

import express from 'express';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import cors from 'cors';
import compression from 'compression';
import path from 'path';
import { fileURLToPath } from 'url';

import herrajesRoutes from './routes/herrajes.routes.js';
import melaminasRoutes from './routes/melaminas.routes.js';
import revestimientosRoutes from './routes/revestimientos.routes.js';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 4000;

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Middlewares
app.use(cors({ origin: ['https://tuweb.com', 'http://localhost:3000'] }));
app.use(compression());
app.use(express.json());

// Rutas
app.use('/api/herrajes', herrajesRoutes);
app.use('/api/melaminas', melaminasRoutes);
app.use('/api/revestimientos', revestimientosRoutes);

// Archivos est√°ticos
app.use('/products', express.static(path.join(__dirname, 'products')));

// Home
app.get('/', (req, res) => {
  res.send('üöÄ API de MegaMadera funcionando correctamente');
});

// Error 404
app.use((req, res, next) => {
  res.status(404).json({ error: 'Recurso no encontrado' });
});

// Middleware de errores
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(res.statusCode || 500).json({ error: err.message || 'Error del servidor' });
});

// Conexi√≥n a MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  console.log('‚úÖ Conexi√≥n exitosa a MongoDB');
  app.listen(PORT, () => {
    console.log(`üöÄ Servidor corriendo en http://localhost:${PORT}`);
  });
})
.catch(error => {
  console.error('‚ùå Error al conectar con la base de datos:', error.message);
});





Este codigo no esta del todo bien, por que no esta conectando correctamente con el Frontend:


// Ruta: D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\api\api.js:
import axios from 'axios';

const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:4000/api';

export const getHerrajes = () => axios.get(`${API_BASE}/herrajes`);
export const getMelaminas = () => axios.get(`${API_BASE}/melaminas`);
export const getRevestimientos = () => axios.get(`${API_BASE}/revestimientos`);
export const getRevestimientosNormalizados = () => axios.get(`${API_BASE}/revestimientos/normalizado`);
export const getTodosLosProductos = () => axios.get(`${API_BASE}/productos-todos`);

export { API_BASE };



// Ruta: D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\components\ui\Slider.jsx:
import React, { useRef } from "react";
import styled from "styled-components";
import { breakpoints } from "@/styles/breakpoints";
import { API_BASE } from "@/api/api";
import { useNavigate } from "react-router-dom";

const defaultBuildImagePath = (categoria, nombreImagen, titulo) => {
  let path = "";

  if (titulo.toLowerCase().includes("herrajes")) {
    path = `herrajes/${categoria.toLowerCase().replace(/\s+/g, "-")}/${nombreImagen.trim()}`;
  } else if (titulo.toLowerCase().includes("melaminas")) {
    path = `melaminas/${nombreImagen.trim()}`;
  } else if (titulo.toLowerCase().includes("revestimientos")) {
    const partes = categoria
      .split(" - ")
      .map((s) => s.replace(/-/g, " ").trim());
    const ruta = partes.join("/");
    path = `revestimientos/pared/${ruta}/${nombreImagen.trim()}`;
  }

  return `${API_BASE.replace("/api", "")}/products/${path}`;
};

const Slider = ({
  titulo = "Productos",
  data = [],
  categoriaKey = "nombre",
  productosKey = "productos",
  buildImagePath,
  onLoadMore,
}) => {
  const carruselRef = useRef(null);
  const navigate = useNavigate();

  const scroll = (dir) => {
    if (!carruselRef.current) return;

    const carrusel = carruselRef.current;
    const step = carrusel.clientWidth * 0.8;

    if (
      dir === "right" &&
      carrusel.scrollLeft + carrusel.clientWidth >= carrusel.scrollWidth - 50
    ) {
      onLoadMore?.();
    }

    carrusel.scrollBy({
      left: dir === "left" ? -step : step,
      behavior: "smooth",
    });
  };

  const imagenes = [];

  data.forEach((item) => {
    const categoriaNombre = item[categoriaKey] || "otros";
    const productos = Array.isArray(item[productosKey])
      ? item[productosKey]
      : [item];

    productos.forEach((prod) => {
      const imgs = Array.isArray(prod.imagenes)
        ? prod.imagenes
        : prod.imagen
        ? [prod.imagen]
        : [];

      imgs.forEach((img) => {
        let url = "";

        if (img.startsWith("/products/")) {
          url = `${API_BASE.replace("/api", "")}${img}`;
        } else {
          url = buildImagePath
            ? buildImagePath(categoriaNombre, img, titulo)
            : defaultBuildImagePath(categoriaNombre, img, titulo);
        }

        imagenes.push({
          url,
          alt: prod.nombre || "Producto",
          producto: prod,
          categoria: categoriaNombre,
        });
      });
    });
  });

  if (!imagenes.length) {
    return <SliderWrapper>No hay im√°genes para mostrar.</SliderWrapper>;
  }

  const irADetalle = (producto) => {
    const nombre = encodeURIComponent(producto.nombre);
    let pagina = "";

    if (titulo.toLowerCase().includes("melaminas")) {
      pagina = "/melaminas";
    } else if (titulo.toLowerCase().includes("herrajes")) {
      pagina = "/herrajes";
    } else if (titulo.toLowerCase().includes("revestimientos")) {
      pagina = "/revestimientos";
    }

    navigate(`${pagina}?nombre=${nombre}`);
  };

  return (
    <SliderWrapper>
      <Header>
        <Titulo>{titulo}</Titulo>
        <NavButtons>
          <Btn onClick={() => scroll("left")} aria-label="Desplazar a la izquierda">
            ‚ü®
          </Btn>
          <Btn onClick={() => scroll("right")} aria-label="Desplazar a la derecha">
            ‚ü©
          </Btn>
        </NavButtons>
      </Header>

      <CarruselContainer>
        <Carrusel ref={carruselRef} role="list">
          {imagenes.map((img, idx) => (
            <Card
              key={idx}
              onClick={() => irADetalle(img.producto)}
              role="listitem"
            >
              <Imagen src={img.url} alt={img.alt} />
              <Nombre>{img.alt}</Nombre>
            </Card>
          ))}
        </Carrusel>
      </CarruselContainer>
    </SliderWrapper>
  );
};

export default Slider;

// üé® Estilos

const SliderWrapper = styled.section`
  width: 100%;
  margin: 3rem 0;
`;

const Header = styled.header`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 1rem;
  margin-bottom: 1rem;

  @media (max-width: ${breakpoints.mobile}) {
    flex-direction: column;
    gap: 0.5rem;
  }
`;

const Titulo = styled.h2`
  font-size: 2rem;
  font-weight: 700;
  color: #222;

  @media (max-width: ${breakpoints.tablet}) {
    font-size: 1.6rem;
  }

  @media (max-width: ${breakpoints.mobile}) {
    font-size: 1.4rem;
    text-align: center;
  }
`;

const NavButtons = styled.div`
  display: flex;
  gap: 0.5rem;
`;

const Btn = styled.button`
  background: #f5c518;
  color: #222;
  border: none;
  border-radius: 4px;
  width: 2.2rem;
  height: 2.2rem;
  font-size: 1.1rem;
  cursor: pointer;
  transition: transform 0.2s ease, background 0.3s ease;

  &:hover {
    transform: scale(1.1);
    background: #e0b814;
  }

  &:active {
    transform: scale(0.95);
  }
`;

const CarruselContainer = styled.div`
  position: relative;
  overflow: hidden;
  padding: 0 0.5rem;
`;

const Carrusel = styled.div`
  display: flex;
  gap: 1rem;
  overflow-x: auto;
  scroll-snap-type: x mandatory;
  padding-bottom: 1rem;

  &::-webkit-scrollbar {
    display: none;
  }

  scroll-behavior: smooth;
`;

const Card = styled.article`
  flex: 0 0 auto;
  width: 180px;
  scroll-snap-align: center;
  background: #fff;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  border-radius: 8px;
  cursor: pointer;

  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  @media (max-width: ${breakpoints.tablet}) {
    width: 150px;
  }

  @media (max-width: ${breakpoints.mobile}) {
    width: 120px;
  }
`;

const Imagen = styled.img`
  width: 100%;
  height: 130px;
  object-fit: cover;
  border-top-left-radius: 8px;
  border-top-right-radius: 8px;

  @media (max-width: ${breakpoints.tablet}) {
    height: 110px;
  }

  @media (max-width: ${breakpoints.mobile}) {
    height: 90px;
  }
`;

const Nombre = styled.p`
  padding: 0.6rem;
  font-size: 0.9rem;
  font-weight: 500;
  color: #333;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;

  @media (max-width: ${breakpoints.mobile}) {
    font-size: 0.8rem;
  }
`;


// Ruta: D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\home.jsx:
import React, { useEffect, useState } from "react";
import styled from "styled-components";
import { breakpoints } from "@/styles/breakpoints";

import {
  getHerrajes,
  getMelaminas,
  getRevestimientosNormalizados,
  API_BASE,
} from "@/api/api";

import Banner from "@/components/ui/Banner";
import CardHome from "@/components/cards/CardHome";
import Slider from "@/components/ui/Slider";
import data from "@/data/pages/home";

const PAGE_SIZE = 6;

const Home = () => {
  const [melaminasFull, setMelaminasFull] = useState([]);
  const [melaminas, setMelaminas] = useState([]);
  const [melaminasPage, setMelaminasPage] = useState(1);

  const [herrajesFull, setHerrajesFull] = useState([]);
  const [herrajes, setHerrajes] = useState([]);
  const [herrajesPage, setHerrajesPage] = useState(1);

  const [revestimientosFull, setRevestimientosFull] = useState([]);
  const [revestimientos, setRevestimientos] = useState([]);
  const [revestimientosPage, setRevestimientosPage] = useState(1);

  useEffect(() => {
    const cargarProductos = async () => {
      try {
        const [melRes, herRes, revRes] = await Promise.all([
          getMelaminas(),
          getHerrajes(),
          getRevestimientosNormalizados(),
        ]);

        const mel = Array.isArray(melRes.data?.data) ? melRes.data.data : [];
        const her = Array.isArray(herRes.data?.data) ? herRes.data.data : [];
        const rev = Array.isArray(revRes.data) ? revRes.data : [];

        setMelaminasFull(mel);
        setHerrajesFull(her);
        setRevestimientosFull(rev);

        setMelaminas(mel.slice(0, PAGE_SIZE));
        setHerrajes(her.slice(0, PAGE_SIZE));
        setRevestimientos(rev.slice(0, PAGE_SIZE));
      } catch (err) {
        console.error("‚ùå Error al cargar productos:", err);
      }
    };

    cargarProductos();
  }, []);

  const loadMore = (fullData, currentPage, setPage, setVisible) => {
    const nextPage = currentPage + 1;
    setPage(nextPage);
    setVisible(fullData.slice(0, nextPage * PAGE_SIZE));
  };

  const handleLoadMoreHerrajes = () =>
    loadMore(herrajesFull, herrajesPage, setHerrajesPage, setHerrajes);

  const handleLoadMoreMelaminas = () =>
    loadMore(melaminasFull, melaminasPage, setMelaminasPage, setMelaminas);

  const handleLoadMoreRevestimientos = () =>
    loadMore(
      revestimientosFull,
      revestimientosPage,
      setRevestimientosPage,
      setRevestimientos
    );

  const buildImagePath = (path, nombreImagen) =>
    `${API_BASE.replace(
      "/api",
      ""
    )}/products/revestimientos/${path}/${nombreImagen}`;

  return (
    <HomeSection>
      <Banner />

      <Section>
        <SectionTitle>Herrajes</SectionTitle>
        <Slider
          titulo="Herrajes"
          data={herrajes}
          categoriaKey="categoria"
          productosKey="productos"
          onLoadMore={handleLoadMoreHerrajes}
        />
      </Section>

      <Section>
        <SectionTitle>Melaminas</SectionTitle>
        <Slider
          titulo="Melaminas"
          data={melaminas}
          categoriaKey="categoria"
          productosKey="productos"
          onLoadMore={handleLoadMoreMelaminas}
        />
      </Section>

      <Section>
        <SectionTitle>Revestimientos</SectionTitle>
        <Slider
          titulo="Revestimientos"
          data={revestimientos}
          categoriaKey="path"
          productosKey="productos"
          onLoadMore={handleLoadMoreRevestimientos}
          buildImagePath={buildImagePath}
        />
      </Section>

      <Section>
        <SectionTitle>Explora nuestras secciones</SectionTitle>
        <CardsGrid>
          {Object.values(data.secciones).map((seccion) => (
            <CardHome
              key={seccion.id}
              name={seccion.name}
              image={seccion.image}
              page={seccion.page}
            />
          ))}
        </CardsGrid>
      </Section>
    </HomeSection>
  );
};

export default Home;

// üé® Estilos
const HomeSection = styled.main`
  width: 100%;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  box-sizing: border-box;

  & > section:last-child {
    margin-bottom: 4rem;
  }
`;

const Section = styled.section`
  width: 100%;
  max-width: 1400px;
  margin: 0 auto;
  padding: 3rem 1rem;

  @media (max-width: ${breakpoints.tablet}) {
    padding: 2rem 1rem;
  }

  @media (max-width: ${breakpoints.mobile}) {
    padding: 1.5rem 0.5rem;
  }
`;

const SectionTitle = styled.h2`
  font-size: 2rem;
  font-weight: 700;
  color: #222;
  margin-bottom: 2rem;

  @media (max-width: ${breakpoints.tablet}) {
    font-size: 1.75rem;
  }

  @media (max-width: ${breakpoints.mobile}) {
    font-size: 1.4rem;
    text-align: center;
  }
`;

const CardsGrid = styled.div`
  width: 100%;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 1.5rem;

  @media (max-width: ${breakpoints.tablet}) {
    gap: 1rem;
  }

  @media (max-width: ${breakpoints.mobile}) {
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }
`;

// D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\melaminas.jsx:
import React, { useEffect, useState } from "react";
import styled from "styled-components";
import { useLocation, useNavigate } from "react-router-dom";
import { getMelaminas, API_BASE } from "@/api/api.js";
import ProductoDestacado from "@/components/ProductoDestacado.jsx";
import { breakpoints } from "@/styles/breakpoints";

const construirRutaImagen = (img) => {
  if (!img) return "";
  const tieneExtension = /\.[a-zA-Z0-9]{3,4}$/.test(img);
  return `${API_BASE.replace("/api", "")}/products/melaminas/${img}${
    tieneExtension ? "" : ".jpg"
  }`;
};

const MelaminasPage = () => {
  const [melaminas, setMelaminas] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);
  const [busqueda, setBusqueda] = useState("");
  const [productoDestacado, setProductoDestacado] = useState(null);

  const location = useLocation();
  const navigate = useNavigate();

  const params = new URLSearchParams(location.search);
  const nombreSeleccionado = params.get("nombre")?.toLowerCase() || "";

  useEffect(() => {
    const cargarMelaminas = async () => {
      try {
        const res = await getMelaminas();
        const mel = Array.isArray(res.data?.data) ? res.data.data : [];
        setMelaminas(mel);

        if (nombreSeleccionado) {
          for (const cat of mel) {
            const prod = cat.productos.find(
              (p) => p.nombre.toLowerCase() === nombreSeleccionado
            );
            if (prod) {
              setProductoDestacado(prod);
              break;
            }
          }
        }
      } catch (err) {
        console.error("‚ùå Error al cargar melaminas:", err);
        setError(true);
      } finally {
        setLoading(false);
      }
    };
    cargarMelaminas();
  }, [nombreSeleccionado]);

  const seleccionarProducto = (producto) => {
    navigate(`?nombre=${encodeURIComponent(producto.nombre)}`);
    setProductoDestacado(producto);
  };

  const cerrarModal = () => {
    navigate(`/melaminas`);
    setProductoDestacado(null);
  };

  const filtrar = (producto) => {
    const termino = busqueda.toLowerCase();
    return producto.nombre?.toLowerCase().includes(termino);
  };

  if (loading) return <Container>Cargando melaminas...</Container>;
  if (error) return <Container>Error al cargar los datos.</Container>;
  if (!melaminas.length) {
    return <Container>No hay melaminas para mostrar.</Container>;
  }

  return (
    <Container>
      <TituloPrincipal>Melaminas</TituloPrincipal>

      <Busqueda
        type="text"
        placeholder="Buscar melamina por nombre..."
        value={busqueda}
        onChange={(e) => setBusqueda(e.target.value)}
      />

      {melaminas.map((cat, i) => (
        <div key={i}>
          <CategoriaTitulo>{cat.categoria}</CategoriaTitulo>
          <Grid>
            {(cat.productos || []).filter(filtrar).length === 0 ? (
              <EmptyMsg>No hay productos en esta categor√≠a.</EmptyMsg>
            ) : (
              cat.productos
                .filter(filtrar)
                .map((prod, j) => (
                  <ProductoCard
                    key={j}
                    producto={prod}
                    onClick={() => seleccionarProducto(prod)}
                  />
                ))
            )}
          </Grid>
        </div>
      ))}

      {productoDestacado && (
        <ModalOverlay>
          <Modal>
            <CloseButton onClick={cerrarModal}>√ó</CloseButton>
            <ProductoDestacado
              producto={productoDestacado}
              construirRutaImagen={construirRutaImagen}
            />
          </Modal>
        </ModalOverlay>
      )}
    </Container>
  );
};

const ProductoCard = ({ producto, onClick }) => {
  const [imagenActiva] = useState(0);
  const imagenes = Array.isArray(producto.imagenes) ? producto.imagenes : [];
  const imagenSrc = construirRutaImagen(imagenes[imagenActiva]);

  return (
    <Card onClick={onClick}>
      {imagenSrc && (
        <Imagen src={imagenSrc} alt={producto.nombre || "Sin nombre"} />
      )}
      <Nombre>{producto.nombre}</Nombre>
    </Card>
  );
};

export default MelaminasPage;

// üé® Estilos
const Container = styled.div`
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;

  @media (max-width: ${breakpoints.tablet}) {
    padding: 1.5rem;
  }
`;

const TituloPrincipal = styled.h1`
  font-size: 2.4rem;
  font-weight: bold;
  margin-bottom: 2rem;
  color: #222;

  @media (max-width: ${breakpoints.mobile}) {
    font-size: 1.8rem;
    text-align: center;
  }
`;

const CategoriaTitulo = styled.h2`
  font-size: 1.4rem;
  font-weight: bold;
  margin-top: 2rem;
  margin-bottom: 1rem;
  color: #333;

  @media (max-width: ${breakpoints.mobile}) {
    font-size: 1.2rem;
  }
`;

const Grid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
  gap: 1rem;

  @media (max-width: ${breakpoints.mobile}) {
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 0.75rem;
  }
`;

const Busqueda = styled.input`
  width: 100%;
  max-width: 400px;
  margin-bottom: 2rem;
  padding: 0.6rem;
  font-size: 1rem;
  border: 1px solid #ddd;
  border-radius: 8px;
`;

const Card = styled.div`
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
  text-align: center;
  cursor: pointer;
  transition: transform 0.2s ease;

  &:hover {
    transform: translateY(-2px);
  }
`;

const Imagen = styled.img`
  width: 100%;
  height: 120px;
  object-fit: cover;
  border-top-left-radius: 8px;
  border-top-right-radius: 8px;
`;

const Nombre = styled.h3`
  font-size: 1rem;
  margin: 0.5rem 0;
  color: #333;
`;

const EmptyMsg = styled.p`
  font-size: 0.95rem;
  color: #999;
  text-align: center;
`;

// Modal styles
const ModalOverlay = styled.div`
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  padding: 1rem;
`;

const Modal = styled.div`
  background: white;
  border-radius: 12px;
  padding: 1rem;
  max-width: 600px;
  width: 100%;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;

  @media (max-width: ${breakpoints.tablet}) {
    max-width: 90%;
  }
`;

const CloseButton = styled.button`
  position: absolute;
  top: 0.8rem;
  right: 0.8rem;
  background: transparent;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
`;





// Ruta: D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\revestimientos.jsx:
import React, { useEffect, useState } from "react";
import styled from "styled-components";
import { useLocation, useNavigate } from "react-router-dom";
import { getRevestimientosNormalizados, API_BASE } from "@/api/api.js";
import ProductoDestacado from "@/components/ProductoDestacado.jsx";
import { breakpoints } from "@/styles/breakpoints";

const construirRutaImagen = (path, nombreImagen) => {
  return `${API_BASE.replace("/api", "")}/products/revestimientos/${path}/${nombreImagen}`;
};

const RevestimientosPage = () => {
  const [revestimientos, setRevestimientos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);
  const [busqueda, setBusqueda] = useState("");
  const [productoDestacado, setProductoDestacado] = useState(null);

  const location = useLocation();
  const navigate = useNavigate();

  const params = new URLSearchParams(location.search);
  const nombreSeleccionado = params.get("nombre")?.toLowerCase() || "";

  useEffect(() => {
    const cargarRevestimientos = async () => {
      try {
        const res = await getRevestimientosNormalizados();
        const data = Array.isArray(res.data) ? res.data : [];
        setRevestimientos(data);

        if (nombreSeleccionado) {
          for (const cat of data) {
            const prod = cat.productos.find(
              (p) => p.nombre.toLowerCase() === nombreSeleccionado
            );
            if (prod) {
              setProductoDestacado({ producto: prod, path: cat.path });
              break;
            }
          }
        }
      } catch (err) {
        console.error("‚ùå Error al cargar revestimientos:", err);
        setError(true);
      } finally {
        setLoading(false);
      }
    };
    cargarRevestimientos();
  }, [nombreSeleccionado]);

  const seleccionarProducto = (producto, path) => {
    navigate(`?nombre=${encodeURIComponent(producto.nombre)}`);
    setProductoDestacado({ producto, path });
  };

  const cerrarModal = () => {
    navigate(`/revestimientos`);
    setProductoDestacado(null);
  };

  const filtrar = (producto) => {
    const termino = busqueda.toLowerCase();
    return producto.nombre?.toLowerCase().includes(termino);
  };

  if (loading) return <Container>Cargando revestimientos...</Container>;
  if (error) return <Container>Error al cargar los datos.</Container>;
  if (!revestimientos.length) {
    return <Container>No hay revestimientos para mostrar.</Container>;
  }

  return (
    <Container>
      <TituloPrincipal>Revestimientos</TituloPrincipal>

      <Busqueda
        type="text"
        placeholder="Buscar revestimiento por nombre..."
        value={busqueda}
        onChange={(e) => setBusqueda(e.target.value)}
      />

      {revestimientos.map((cat, i) => (
        <div key={i}>
          <CategoriaTitulo>{cat.path.replace(/-/g, " ")}</CategoriaTitulo>
          <Grid>
            {cat.productos.filter(filtrar).length === 0 ? (
              <EmptyMsg>No hay productos en esta categor√≠a.</EmptyMsg>
            ) : (
              cat.productos
                .filter(filtrar)
                .map((prod, j) => (
                  <ProductoCard
                    key={j}
                    producto={prod}
                    path={cat.path}
                    onClick={() => seleccionarProducto(prod, cat.path)}
                  />
                ))
            )}
          </Grid>
        </div>
      ))}

      {productoDestacado && (
        <ModalOverlay>
          <Modal>
            <CloseButton onClick={cerrarModal}>√ó</CloseButton>
            <ProductoDestacado
              producto={productoDestacado.producto}
              path={productoDestacado.path}
              construirRutaImagen={(img, path) =>
                construirRutaImagen(path, img)
              }
            />
          </Modal>
        </ModalOverlay>
      )}
    </Container>
  );
};

const ProductoCard = ({ producto, path, onClick }) => {
  const [imagenActiva] = useState(0);
  const imagenes = Array.isArray(producto.imagenes) ? producto.imagenes : [];
  const imagenSrc = construirRutaImagen(path, imagenes[imagenActiva]);

  return (
    <Card onClick={onClick}>
      {imagenSrc && <Imagen src={imagenSrc} alt={producto.nombre || "Sin nombre"} />}
      <Nombre>{producto.nombre}</Nombre>
    </Card>
  );
};

export default RevestimientosPage;

// üé® Estilos
const Container = styled.div`
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;

  @media (max-width: ${breakpoints.tablet}) {
    padding: 1.5rem;
  }
`;

const TituloPrincipal = styled.h1`
  font-size: 2.4rem;
  font-weight: bold;
  margin-bottom: 2rem;
  color: #222;

  @media (max-width: ${breakpoints.mobile}) {
    font-size: 1.8rem;
    text-align: center;
  }
`;

const CategoriaTitulo = styled.h2`
  font-size: 1.4rem;
  font-weight: bold;
  margin-top: 2rem;
  margin-bottom: 1rem;
  color: #333;

  @media (max-width: ${breakpoints.mobile}) {
    font-size: 1.2rem;
  }
`;

const Grid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
  gap: 1rem;

  @media (max-width: ${breakpoints.mobile}) {
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 0.75rem;
  }
`;

const Busqueda = styled.input`
  width: 100%;
  max-width: 400px;
  margin-bottom: 2rem;
  padding: 0.6rem;
  font-size: 1rem;
  border: 1px solid #ddd;
  border-radius: 8px;
`;

const Card = styled.div`
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
  text-align: center;
  cursor: pointer;
  transition: transform 0.2s ease;

  &:hover {
    transform: translateY(-2px);
  }
`;

const Imagen = styled.img`
  width: 100%;
  height: 120px;
  object-fit: cover;
  border-top-left-radius: 8px;
  border-top-right-radius: 8px;
`;

const Nombre = styled.h3`
  font-size: 1rem;
  margin: 0.5rem 0;
  color: #333;
`;

const EmptyMsg = styled.p`
  font-size: 0.95rem;
  color: #999;
  text-align: center;
`;

// Modal styles
const ModalOverlay = styled.div`
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  padding: 1rem;
`;

const Modal = styled.div`
  background: white;
  border-radius: 12px;
  padding: 1rem;
  max-width: 600px;
  width: 100%;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;

  @media (max-width: ${breakpoints.tablet}) {
    max-width: 90%;
  }
`;

const CloseButton = styled.button`
  position: absolute;
  top: 0.8rem;
  right: 0.8rem;
  background: transparent;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
`;



// Ruta: D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\herrajes.jsx:
import React, { useEffect, useState } from "react";
import styled from "styled-components";
import { useLocation, useNavigate } from "react-router-dom";
import { getHerrajes } from "@/api/api.js";
import ProductoDestacado from "@/components/ProductoDestacado.jsx";
import { breakpoints } from "@/styles/breakpoints";

const construirRutaImagen = (imagen, categoria) => {
  if (!imagen || !categoria) return "";
  const fileName = imagen.split("/").pop();
  return `http://localhost:4000/products/herrajes/${encodeURIComponent(categoria)}/${encodeURIComponent(fileName)}`;
};

const HerrajesPage = () => {
  const [herrajes, setHerrajes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);
  const [busqueda, setBusqueda] = useState("");
  const [productoDestacado, setProductoDestacado] = useState(null);

  const location = useLocation();
  const navigate = useNavigate();

  const params = new URLSearchParams(location.search);
  const nombreSeleccionado = params.get("nombre")?.toLowerCase() || "";

  useEffect(() => {
    const cargarHerrajes = async () => {
      try {
        const res = await getHerrajes();
        const data = res.data?.herrajes || res.data?.data || res.data || [];
        setHerrajes(data);

        if (nombreSeleccionado) {
          for (const cat of data) {
            const prod = cat.productos.find(
              (p) => p.nombre.toLowerCase() === nombreSeleccionado
            );
            if (prod) {
              setProductoDestacado({ producto: prod, categoria: cat.categoria });
              break;
            }
          }
        }
      } catch (err) {
        console.error("‚ùå Error al cargar herrajes:", err);
        setError(true);
      } finally {
        setLoading(false);
      }
    };

    cargarHerrajes();
  }, [nombreSeleccionado]);

  const seleccionarProducto = (producto, categoria) => {
    navigate(`?nombre=${encodeURIComponent(producto.nombre)}`);
    setProductoDestacado({ producto, categoria });
  };

  const cerrarModal = () => {
    navigate(`/herrajes`);
    setProductoDestacado(null);
  };

  const filtrar = (producto) => {
    const termino = busqueda.toLowerCase();
    return producto.nombre?.toLowerCase().includes(termino);
  };

  if (loading) return <Container>Cargando herrajes...</Container>;
  if (error) return <Container>Error al cargar los datos.</Container>;
  if (!herrajes.length) {
    return <Container>No hay herrajes para mostrar.</Container>;
  }

  return (
    <Container>
      <TituloPrincipal>Herrajes</TituloPrincipal>

      <Busqueda
        type="text"
        placeholder="Buscar herraje por nombre..."
        value={busqueda}
        onChange={(e) => setBusqueda(e.target.value)}
      />

      {herrajes.map((cat, i) => (
        <div key={i}>
          <CategoriaTitulo>{cat.categoria}</CategoriaTitulo>
          <Grid>
            {cat.productos.filter(filtrar).length === 0 ? (
              <EmptyMsg>No hay productos en esta categor√≠a.</EmptyMsg>
            ) : (
              cat.productos
                .filter(filtrar)
                .map((prod, j) => (
                  <ProductoCard
                    key={j}
                    producto={prod}
                    categoria={cat.categoria}
                    onClick={() => seleccionarProducto(prod, cat.categoria)}
                  />
                ))
            )}
          </Grid>
        </div>
      ))}

      {productoDestacado && (
        <ModalOverlay>
          <Modal>
            <CloseButton onClick={cerrarModal}>√ó</CloseButton>
            <ProductoDestacado
              producto={productoDestacado.producto}
              categoria={productoDestacado.categoria}
              construirRutaImagen={(img, categoria) =>
                construirRutaImagen(img, categoria)
              }
            />
          </Modal>
        </ModalOverlay>
      )}
    </Container>
  );
};

const ProductoCard = ({ producto, categoria, onClick }) => {
  const [imagenActiva] = useState(0);
  const imagenes = Array.isArray(producto.imagenes) ? producto.imagenes : [];
  const imagenSrc = construirRutaImagen(imagenes[imagenActiva], categoria);

  return (
    <Card onClick={onClick}>
      {imagenSrc && <Imagen src={imagenSrc} alt={producto.nombre || "Sin nombre"} />}
      <Nombre>{producto.nombre}</Nombre>
    </Card>
  );
};

export default HerrajesPage;

// üé® Estilos
const Container = styled.div`
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;

  @media (max-width: ${breakpoints.tablet}) {
    padding: 1.5rem;
  }
`;

const TituloPrincipal = styled.h1`
  font-size: 2.4rem;
  font-weight: bold;
  margin-bottom: 2rem;
  color: #222;

  @media (max-width: ${breakpoints.mobile}) {
    font-size: 1.8rem;
    text-align: center;
  }
`;

const CategoriaTitulo = styled.h2`
  font-size: 1.4rem;
  font-weight: bold;
  margin-top: 2rem;
  margin-bottom: 1rem;
  color: #333;

  @media (max-width: ${breakpoints.mobile}) {
    font-size: 1.2rem;
  }
`;

const Grid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
  gap: 1rem;

  @media (max-width: ${breakpoints.mobile}) {
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 0.75rem;
  }
`;

const Busqueda = styled.input`
  width: 100%;
  max-width: 400px;
  margin-bottom: 2rem;
  padding: 0.6rem;
  font-size: 1rem;
  border: 1px solid #ddd;
  border-radius: 8px;
`;

const Card = styled.div`
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
  text-align: center;
  cursor: pointer;
  transition: transform 0.2s ease;

  &:hover {
    transform: translateY(-2px);
  }
`;

const Imagen = styled.img`
  width: 100%;
  height: 120px;
  object-fit: cover;
  border-top-left-radius: 8px;
  border-top-right-radius: 8px;
`;

const Nombre = styled.h3`
  font-size: 1rem;
  margin: 0.5rem 0;
  color: #333;
`;

const EmptyMsg = styled.p`
  font-size: 0.95rem;
  color: #999;
  text-align: center;
`;

// Modal styles
const ModalOverlay = styled.div`
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  padding: 1rem;
`;

const Modal = styled.div`
  background: white;
  border-radius: 12px;
  padding: 1rem;
  max-width: 600px;
  width: 100%;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;

  @media (max-width: ${breakpoints.tablet}) {
    max-width: 90%;
  }
`;

const CloseButton = styled.button`
  position: absolute;
  top: 0.8rem;
  right: 0.8rem;
  background: transparent;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
`;


// D:\Empresas\Programacion\Proyectos\MegaMadera\Frontend\src\pages\simulador.jsx:
import React, { useState, useEffect } from "react";
import styled from "styled-components";
import { getMelaminas, API_BASE } from "@/api/api.js";
import { imagenesSimulador } from "@/data/image/gestorImage";
import { breakpoints } from "@/styles/breakpoints";

const construirRutaImagen = (img) => {
  if (!img) return '';
  const tieneExtension = /\.[a-zA-Z0-9]{3,4}$/.test(img);
  return `${API_BASE.replace('/api', '')}/products/melaminas/${img}${tieneExtension ? '' : '.jpg'}`;
};

const Simulador = () => {
  const [productos, setProductos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);

  const [busqueda, setBusqueda] = useState("");
  const [melaminaSeleccionada, setMelaminaSeleccionada] = useState(null);
  const [muebleSeleccionado, setMuebleSeleccionado] = useState("simulador-1");

  useEffect(() => {
    const cargarMelaminas = async () => {
      try {
        const res = await getMelaminas();
        const melaminas = Array.isArray(res.data?.data) ? res.data.data : [];

        const productosPlanos = melaminas.flatMap((cat) =>
          (cat.productos || []).map((prod) => ({
            ...prod,
            categoria: cat.categoria,
          }))
        );

        setProductos(productosPlanos);
      } catch (err) {
        console.error("‚ùå Error al cargar melaminas en simulador:", err);
        setError(true);
      } finally {
        setLoading(false);
      }
    };

    cargarMelaminas();
  }, []);

  const productosFiltrados = productos.filter((item) =>
    item.nombre.toLowerCase().includes(busqueda.toLowerCase())
  );

  const imagenFondo =
    melaminaSeleccionada?.imagenes?.[0]
      ? construirRutaImagen(melaminaSeleccionada.imagenes[0])
      : null;

  const imagenMueble = imagenesSimulador[muebleSeleccionado];

  if (loading) return <SimuladorArea>Cargando melaminas...</SimuladorArea>;
  if (error) return <SimuladorArea>Error al cargar melaminas.</SimuladorArea>;

  return (
    <MainContainer>
      <Menu>
        <Busqueda
          placeholder="Buscar melamina..."
          value={busqueda}
          onChange={(e) => setBusqueda(e.target.value)}
        />

        {melaminaSeleccionada && (
          <QuitarBoton
            onClick={() => {
              setMelaminaSeleccionada(null);
              setBusqueda("");
            }}
          >
            ‚úï Quitar melamina
          </QuitarBoton>
        )}

        <TituloMenu>Melaminas</TituloMenu>
        {productosFiltrados.map((producto) => (
          <BotonMenu
            key={producto.codigo}
            onClick={() => setMelaminaSeleccionada(producto)}
            $activo={melaminaSeleccionada?.codigo === producto.codigo}
          >
            {producto.nombre}
          </BotonMenu>
        ))}

        <TituloMenu>Muebles</TituloMenu>
        {["simulador-1", "simulador-2"].map((key, i) => (
          <BotonMenu
            key={key}
            onClick={() => setMuebleSeleccionado(key)}
            $activo={muebleSeleccionado === key}
          >
            Mueble {i + 1}
          </BotonMenu>
        ))}
      </Menu>

      <SimuladorArea>
        <SimuladorContenido>
          {imagenFondo && (
            <MelaminaWrapper $mueble={muebleSeleccionado}>
              <MelaminaFondo
                src={imagenFondo}
                alt="Fondo melamina"
                loading="lazy"
              />
            </MelaminaWrapper>
          )}
          {imagenMueble && <ImagenMueble src={imagenMueble} alt="Mueble" />}
          {!imagenFondo && (
            <Instruccion>Seleccion√° una melamina para ver el simulador</Instruccion>
          )}
        </SimuladorContenido>
      </SimuladorArea>
    </MainContainer>
  );
};

export default Simulador;

// üé® estilos

const MainContainer = styled.div`
  display: flex;
  height: 100vh;
  width: 100%;

  @media (max-width: ${breakpoints.mobile}) {
    flex-direction: column;
    height: auto;
  }
`;

const Menu = styled.aside`
  width: 250px;
  background: #f1f1f1;
  padding: 1rem;
  overflow-y: auto;

  @media (max-width: ${breakpoints.mobile}) {
    width: 100%;
    position: sticky;
    top: 0;
    z-index: 10;
    border-bottom: 1px solid #ddd;
  }
`;

const TituloMenu = styled.h2`
  font-size: 1rem;
  margin: 1.5rem 0 0.5rem;
  color: #444;
  border-bottom: 1px solid #ccc;
  padding-bottom: 0.25rem;
`;

const BotonMenu = styled.button`
  width: 100%;
  padding: 0.5rem;
  margin-bottom: 0.25rem;
  background-color: ${({ $activo }) => ($activo ? "#d0eaff" : "white")};
  color: ${({ $activo }) => ($activo ? "#004080" : "#333")};
  border: 1px solid ${({ $activo }) => ($activo ? "#007acc" : "#ccc")};
  border-radius: 6px;
  text-align: left;
  cursor: pointer;
  font-size: 0.9rem;
  transition: background-color 0.2s;

  &:hover {
    background-color: #e0e0e0;
  }
`;

const QuitarBoton = styled.button`
  width: 100%;
  margin: 0.8rem 0 0.6rem;
  padding: 0.5rem;
  background-color: #ffdddd;
  color: #b30000;
  border: 1px solid #b30000;
  border-radius: 6px;
  text-align: center;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 600;
  transition: background-color 0.2s;

  &:hover {
    background-color: #ffbbbb;
  }
`;

const Busqueda = styled.input`
  padding: 0.6rem;
  width: 100%;
  border: 1px solid #ccc;
  border-radius: 6px;
  font-size: 0.9rem;
`;

const SimuladorArea = styled.main`
  flex: 1;
  background: #ddd;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: auto;
`;

const SimuladorContenido = styled.div`
  position: relative;
  width: 90%;
  max-width: 900px;
  aspect-ratio: 16 / 9;
  background: #ccc;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const MelaminaWrapper = styled.div`
  position: absolute;
  height: 100%;
  z-index: 1;
  overflow: hidden;

  ${({ $mueble }) => $mueble === "simulador-1" && `
    width: 73%;
  `}
  ${({ $mueble }) => $mueble === "simulador-2" && `
    width: 100%;
  `}
`;

const MelaminaFondo = styled.img`
  width: 100%;
  height: 100%;
  object-fit: cover;
  filter: brightness(1.05);
`;

const ImagenMueble = styled.img`
  position: absolute;
  width: 100%;
  height: 100%;
  object-fit: contain;
  z-index: 2;
`;

const Instruccion = styled.p`
  position: relative;
  z-index: 3;
  font-size: 1.1rem;
  color: #555;
  background: rgba(255, 255, 255, 0.85);
  padding: 1rem 1.5rem;
  border-radius: 12px;
  text-align: center;
`;

